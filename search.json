[{"path":"https://docs.salmonmse.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"salmonMSE Copyright (C) 2024  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. salmonMSE  Copyright (C) 2024 This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Conditioning model from CWT and escapement","text":"Typical run reconstruction uses historical time series spawner recruit data estimate productivity salmon populations. Escapement time series may available catch may identifiable population interest, example, population conservation unit, part larger stock complex catch composition identified individual CUs. Walters Korman (2024) demonstrated approach reconstruction Coded Wire Tag (CWT) data indicator hatchery assumed representative life cycle parameters natural population. model consists two components. First, CWT data informs natural mortality, maturation, exploitation rate marine environment. Second, parameters applied system interest informs size productivity population time series total escapement. number hatchery releases system informs hatchery production, difference total escapement hatchery production informs natural production. steps accomplished within single model fit, can account uncertainty among various data components, posterior distributions parameters obtained MCMC. utilize approach conditioning model inform stochastic parameters projections salmonMSE, although use model necessary set operating model.","code":""},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"model-fitting","dir":"Articles","previous_headings":"Introduction","what":"Model fitting","title":"Conditioning model from CWT and escapement","text":"Model fitting performed RTMB fit_CM(). posterior can sampled sample_CM() rstan. subset posterior MCMC draws parameters reconstruct historical population can imported operating model CM2SOM(). modification operating model additional settings can added run projection.","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"life-cycle-parameters","dir":"Articles","previous_headings":"","what":"Life cycle parameters","title":"Conditioning model from CWT and escapement","text":"Life cycle parameters informed CWT. Mortality rates parameterized instantaneous units, can converted survival terms. Fishing mortality FF separated preterminal (PT) component acts juvenile fish terminal (T) component mature fish. Separable effects modeled fishing mortality year-specific modified age class vulnerability term vv. Survival juvenile CWT next age class aa beginning year yy calculated exploitation, maturation mm, natural mortality MM: Ny+1,+1juv,CWT=Ny,ajuv,CWTexp(−vaPTFyPT)(1−,)exp(−,) N^\\textrm{juv,CWT}_{y+1,+1} = N^\\textrm{juv,CWT}_{y,}\\exp(-v^\\textrm{PT}_aF^\\textrm{PT}_y)(1 - m_{y,})\\exp(-M_{y,}) age-1 CWT assumed releases specified user, .e., $N^_{y,=1}= $. CWT return RR fraction maturing juveniles preterminal exploitation Ry,aCWT=Ny,ajuv,CWTexp(−vaPTFyPT),R^\\textrm{CWT}_{y,} = N^\\textrm{juv,CWT}_{y,}\\exp(-v^\\textrm{PT}_aF^\\textrm{PT}_y)m_{y,} escapement return survive terminal exploitation Ey,aCWT=Ry,aCWTexp(−vaTFyT) E^\\textrm{CWT}_{y,} = R^\\textrm{CWT}_{y,}\\exp(-v^\\textrm{T}_aF^\\textrm{T}_y) catch CC Cy,aCWT,PT=Ny,ajuv,CWT(1−exp(−vaPTFyPT))Cy,aCWT,T=Ry,aCWT(1−exp(−vaTFyT))\\begin{align} C^\\textrm{CWT,PT}_{y,} &= N^\\textrm{juv,CWT}_{y,}(1 - \\exp(-v^\\textrm{PT}_aF^\\textrm{PT}_y))\\\\ C^\\textrm{CWT,T}_{y,} &= R^\\textrm{CWT}_{y,}(1 - \\exp(-v^\\textrm{T}_aF^\\textrm{T}_y)) \\end{align}","code":""},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"hatchery-and-natural-production","dir":"Articles","previous_headings":"","what":"Hatchery and natural production","title":"Conditioning model from CWT and escapement","text":"model separate accounting natural-origin (\\textrm{}) hatchery-origin (HO\\textrm{HO}) fish population interest. abundance juvenile fish, recruitment, escapement uses exploitation rate, maturity, natural mortality parameters estimated CWT. Ny+1,+1juv,=Ny,ajuv,NOexp(−vaPTFyPT)(1−,)exp(−,)Ny+1,+1juv,HO=Ny,ajuv,HOexp(−vaPTFyPT)(1−,)exp(−,)\\begin{align} N^\\textrm{juv,}_{y+1,+1} &= N^\\textrm{juv,}_{y,}\\exp(-v^\\textrm{PT}_aF^\\textrm{PT}_y)(1 - m_{y,})\\exp(-M_{y,})\\\\ N^\\textrm{juv,HO}_{y+1,+1} &= N^\\textrm{juv,HO}_{y,}\\exp(-v^\\textrm{PT}_aF^\\textrm{PT}_y)(1 - m_{y,})\\exp(-M_{y,}) \\end{align} age 1, age-1 HO fish obtained number releases assumption survival release: Ny,=1juv,HO=NyrelsrelN^\\textrm{juv,HO}_{y,=1} = N^\\textrm{rel}_y s^\\textrm{rel}. age-1 fish equal smolt production: Ny,=1juv,=SmoltyN^\\textrm{juv,}_{y,=1} = \\textrm{Smolt}_y Ry,aNO=Ny,ajuv,NOexp(−vaPTFyPT),aRy,aHO=Ny,ajuv,HOexp(−vaPTFyPT),\\begin{align} R^\\textrm{}_{y,} &= N^\\textrm{juv,}_{y,}\\exp(-v^\\textrm{PT}_aF^\\textrm{PT}_y)m_{y,}\\\\ R^\\textrm{HO}_{y,} &= N^\\textrm{juv,HO}_{y,}\\exp(-v^\\textrm{PT}_aF^\\textrm{PT}_y)m_{y,} \\end{align} Ey,aNO=Ry,aNOexp(−vaTFyT)Ey,aHO=Ry,aHOexp(−vaTFyT)\\begin{align} E^\\textrm{}_{y,} &= R^\\textrm{}_{y,}\\exp(-v^\\textrm{T}_aF^\\textrm{T}_y)\\\\ E^\\textrm{HO}_{y,} &= R^\\textrm{HO}_{y,}\\exp(-v^\\textrm{T}_aF^\\textrm{T}_y) \\end{align} number spawners calculated escapement, en-route survival rate, proportion allowed spawn. proportion can calculated ratio broodtake observed escapement: NOSy,=Ey,aNOsenroutepyspawnHOSy,=Ey,aHOsenroutepyspawn\\begin{align} \\textrm{NOS}_{y,} &= E^\\textrm{}_{y,} s^\\textrm{enroute} p^\\textrm{spawn}_y\\\\ \\textrm{HOS}_{y,} &= E^\\textrm{HO}_{y,} s^\\textrm{enroute} p^\\textrm{spawn}_y \\end{align} egg production calculated proportion females fecundity ff age: Eggy=pfemale∑afa(NOSy,+γ×HOSy,) \\textrm{Egg}_y = p^\\textrm{female}\\sum_a f_a (\\textrm{NOS}_{y,} + \\gamma \\times \\textrm{HOS}_{y,}) smolt production calculated Ricker stock-recruit function: Smolty+1=α×Eggy×exp(−β×Eggy)exp(−δy) \\textrm{Smolt}_{y+1} = \\alpha\\times\\textrm{Egg}_y \\times \\exp(-\\beta \\times \\textrm{Egg}_y) \\exp(-\\delta_y) δy\\delta_y annual deviation density-dependent function, expressed instantaneous mortality rate.","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"fishing-mortality","dir":"Articles","previous_headings":"Parameter estimation and priors","what":"Fishing mortality","title":"Conditioning model from CWT and escapement","text":"Year-specific fishing mortality parameterized FyPT=exp(aPT)Fytrend,PTexp(ωyFPT)FyT=exp()Fytrend,Texp(ωyFT)\\begin{align} F^\\textrm{PT}_y &= \\exp(^\\textrm{PT}) F^\\textrm{trend,PT}_y \\exp(\\omega^\\textrm{FPT}_y)\\\\ F^\\textrm{T}_y &= \\exp(^\\textrm{T}) F^\\textrm{trend,T}_y \\exp(\\omega^\\textrm{FT}_y)\\\\ \\end{align} Ftrend,PTF^\\textrm{trend,PT} time series relative exploitation provided analyst. model estimates scaling coefficient aa annual deviations ω\\omega estimate fishing mortality. prior annual deviations ωyFPT∼N(0,σFPT2)ωyFT∼N(0,σFT2)\\begin{align} \\omega^\\textrm{FPT}_y &\\sim N(0, \\sigma_\\textrm{FPT}^2)\\\\ \\omega^\\textrm{FT}_y &\\sim N(0, \\sigma_\\textrm{FT}^2) \\end{align} hyperpriors σFPT2\\sigma_\\textrm{FPT}^2 σFT2\\sigma_\\textrm{FT}^2: σFPT∼Gamma(2,5)σFT∼Gamma(2,5)\\begin{align} \\sigma_\\textrm{FPT} &\\sim \\textrm{Gamma}(2, 5)\\\\ \\sigma_\\textrm{FT} &\\sim \\textrm{Gamma}(2, 5) \\end{align}","code":""},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"vulnerability","dir":"Articles","previous_headings":"Parameter estimation and priors","what":"Vulnerability","title":"Conditioning model from CWT and escapement","text":"Vulnerability independent terms estimated logit space, relatively uninformative normal priors mean zero standard deviation 1.6: logit(vaPT)∼N(0,1.62)logit(vaT)∼N(0,1.62)\\begin{align} \\textrm{logit}(v^\\textrm{PT}_a) &\\sim N(0, 1.6^2)\\\\ \\textrm{logit}(v^\\textrm{T}_a) &\\sim N(0, 1.6^2) \\end{align} Vulnerability fixed zero one age 1 maximum age (AA), respectively (v1=0v_1 = 0 vA=1v_A = 1). transformed normal space, prior density relatively uniform 0-1 low density bounds:","code":"x <- seq(-5, 5, 0.1) f_x <- dnorm(x, 0, 1.6)  y <- plogis(x) g_y <- f_x /(y * (1 - y)) # Prior density with Jacobian transformation  par(mfcol = c(1, 2), mar = c(5, 4, 1, 1)) plot(x, f_x, typ = 'l', xlab = \"logit(v)\", ylab = \"Prior density\") plot(y, g_y, typ = 'l', xlab = expression(v[a]), ylab = \"Prior density\")"},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"maturity","dir":"Articles","previous_headings":"Parameter estimation and priors","what":"Maturity","title":"Conditioning model from CWT and escapement","text":"Maturity estimated logit space deviations base parameters provided analyst. prior density function Gaussian separate standard deviation σam\\sigma^m_a age: logit(,)∼N(logit(mabase),[σam]2) \\textrm{logit}(m_{y,}) \\sim N(\\textrm{logit}(m_a^\\textrm{base}), [\\sigma^m_a]^2) hyperprior σam∼Gamma(2,5)\\sigma^m_a \\sim \\textrm{Gamma}(2, 5).","code":""},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"natural-mortality","dir":"Articles","previous_headings":"Parameter estimation and priors","what":"Natural mortality","title":"Conditioning model from CWT and escapement","text":"Natural mortality parameterized ,={Mabase+∑iXi,yβi+Madd+εy,=1Mabase+∑jXj,yβj,=2,…,−1 M_{y,} =  \\begin{cases} M^\\textrm{base}_a + \\sum_iX_{,y}\\beta_i+M^\\textrm{add} + \\varepsilon_y &, = 1\\\\ M^\\textrm{base}_a + \\sum_jX_{j,y}\\beta_j &, = 2, \\ldots, -1 \\end{cases} base values provided analyst, year-specific mortality rates can estimated linear combination environmental covariates XX estimated coefficients β\\beta. Separate covariates used age-1 age-2+ fish. age-1, additional scalar MaddM^\\textrm{add} annual deviations εy\\varepsilon_y can estimated base parameter. Gaussion priors used εy\\varepsilon_y: εy∼N(0,[σM]2) \\varepsilon_y \\sim N(0, [\\sigma^M]^2)  hyperprior σM∼Gamma(2,5)\\sigma^M \\sim \\textrm{Gamma}(2, 5).","code":""},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"natural-production","dir":"Articles","previous_headings":"Parameter estimation and priors","what":"Natural production","title":"Conditioning model from CWT and escapement","text":"Ricker α\\alpha parameter α=κ/ϕ0\\alpha = \\kappa/\\phi_0, kappakappa productivity ϕ0\\phi_0 unfished egg-per-smolt corresponding one--one recruits per spawner line ϕ0\\phi_0, ϕ0=∑aℓamabasefapfemale\\phi_0 = \\sum_a \\ell_a m^\\textrm{base}_a f_a p^\\textrm{female}. ℓa\\ell_a juvenile survival age: ℓa={1,=1ℓa−1exp(−Ma−1base)(1−ma−1base),=2,…,\\ell_a =  \\begin{cases} 1 &, = 1\\\\ \\ell_{-1} \\exp(-M^\\textrm{base}_{-1}) (1 - m^\\textrm{base}_{-1}) &, = 2, \\ldots, \\end{cases} β\\beta parameter β=log(κ)/ϕ0r0\\beta = \\log(\\kappa)/\\phi_0r_0, r0r_0 unfished smolt production, first estimated unfished spawners S0S_0 parameter calculated r0=S0/ϕ′0r_0 = S_0/\\phi'_0. ϕ′0=∑aℓamabasepfemale\\phi'_0 = \\sum_a \\ell_a m^\\textrm{base}_a p^\\textrm{female} unfished spawners per smolt. uniform prior used log(κ)\\log(\\kappa), lognormal prior used estimate S0S_0. annual deviations smolt production estimated prior δy∼N(0,σδ2)\\delta_y \\sim N(0, \\sigma_\\delta^2) hyperprior σδ∼Gamma(2,5)\\sigma_\\delta \\sim \\textrm{Gamma}(2, 5).","code":""},{"path":"https://docs.salmonmse.com/articles/conditioning.html","id":"likelihoods","dir":"Articles","previous_headings":"","what":"Likelihoods","title":"Conditioning model from CWT and escapement","text":"likelihood CWT age uses Poisson distribution: Cy,aCWT,PT∼Poisson(Ĉy,aCWT,PT)Cy,aCWT,T∼Poisson(Ĉy,aCWT,T)Ey,aCWT∼Poisson(Êy,aCWT)\\begin{align} C^\\textrm{CWT,PT}_{y,} &\\sim \\textrm{Poisson}(\\hat{C}^\\textrm{CWT,PT}_{y,})\\\\ C^\\textrm{CWT,T}_{y,} &\\sim \\textrm{Poisson}(\\hat{C}^\\textrm{CWT,T}_{y,})\\\\ E^\\textrm{CWT}_{y,} &\\sim \\textrm{Poisson}(\\hat{E}^\\textrm{CWT}_{y,}) \\end{align} ∧\\wedge symbol denotes estimate corresponding observed quantity. likelihood total escapement population interest uses lognormal distribution: log(Ey)∼N(log(∑(Ey,aNO+Ey,aHO)),[σE]2) \\log(E_y) \\sim N\\left(\\log\\left(\\sum_a(E^\\textrm{}_{y,} + E^\\textrm{HO}_{y,})\\right), [\\sigma^E]^2\\right)","code":""},{"path":"https://docs.salmonmse.com/articles/decision-table.html","id":"tradeoff-figure","dir":"Articles","previous_headings":"","what":"Tradeoff figure","title":"Decision table","text":"trade plot compares two performance metrics across suite management actions. tradeoff metrics may appear management action, case hatchery production (denoted shapes figure) good properties respect one metric cost/reduction another. strong tradeoff occurs set management actions aligned along top-left bottom-right diagonal. can use plot_tradeoff() visualize tradeoff mean PNI mean catch long term. Increasing hatchery production increases catch also reduces proportion natural spawners every level productivity (denoted colours), although PNI drops faster low productivity. Typically, science advice presented relative objectives. primary objectives ensuring high PNI used filter unsuitable options, e.g., hatchery production 15 thousand, properties tradeoffs remaining management options characterized.","code":"g <- plot_tradeoff(   pm$PNI, pm$Catch,   x1 = factor(pm$kappa), x2 = factor(pm$hatch),    xlab = \"Mean PNI\", ylab = \"Mean Catch\",   x1lab = \"Compensation\\nratio\", x2lab = \"Hatchery\\nreleases\" ) +   geom_vline(xintercept = c(0.5, 0.8), linetype = 2) +   scale_shape_manual(values = c(1, 2, 4, 16)) g"},{"path":"https://docs.salmonmse.com/articles/decision-table.html","id":"with-confidence-intervals","dir":"Articles","previous_headings":"Tradeoff figure","what":"With confidence intervals","title":"Decision table","text":"Tradeoff figures can created intervals passing matrix plot_tradeoff(). metric, provide three column matrix columns correspond lower bound, central tendency (e.g., median), upper bound values simulations. example:","code":"# Make tradeoff figure with median and confidence intervals  # First calculate the median and bounds for PNI for each scenario PNI_fn <- function(x, SMSE_list, Design) {   out <- Design[x, ]    val <- quantile(SMSE_list[[x]]@PNI[, 1, 49], c(0.025, 0.5, 0.975))    out$lower <- val[1]   out$median <- val[2]   out$upper <- val[3]   return(out) } PNI <- lapply(1:nrow(Design), PNI_fn, SMSE_list, Design = Design) %>%   bind_rows()  # Next calculate the median and bounds for catch for each scenario Catch_fn <- function(x, SMSE_list, Design) {   out <- Design[x, ]    KNOS <- SMSE_list[[x]]@KT_NOS[, 1, 49] # Catch of natural fish   KHOS <- SMSE_list[[x]]@KT_HOS[, 1, 49] # Catch of hatchery fish   val <- quantile(KNOS + KHOS, c(0.025, 0.5, 0.975))    out$lower <- val[1]   out$median <- val[2]   out$upper <- val[3]   return(out) } Catch <- lapply(1:nrow(Design), Catch_fn, SMSE_list, Design = Design) %>%   bind_rows()  # Provide the matrix of PNI and Catch to plot_tradeoff() g <- plot_tradeoff(as.matrix(PNI[, 3:5]), as.matrix(Catch[, 3:5]),                    factor(PNI$kappa), factor(PNI$hatch), \"PNI\", \"Catch\",                    x1lab = \"Productivity\", x2lab = \"Hatchery\\nreleases\") +   geom_vline(xintercept = c(0.5, 0.8), linetype = 2) +   scale_shape_manual(values = c(1, 2, 4, 16))"},{"path":"https://docs.salmonmse.com/articles/decision-table.html","id":"time-series-figures","dir":"Articles","previous_headings":"","what":"Time series figures","title":"Decision table","text":"’s time series median PNI (solid lines) 95 percent prediction interval (shaded region) projection. appears simulations stabilized starting conditions point can make conclusions behavior system dynamics.  Several comparison figures available plot natural production (.e., number spawners) fitness metrics related hatchery production:","code":"library(reshape2)  PNI_ts <- lapply(1:nrow(Design), function(x) {   plot_statevar_ts(SMSE_list[[x]], \"PNI\", quant = TRUE, figure = FALSE) %>%     reshape2::melt() %>%     mutate(kappa = Design$kappa[x], hatch = Design$hatch[x]) }) %>%   bind_rows() %>%   rename(Year = Var2) %>%   dplyr::filter(!is.na(value)) %>%   tidyr::pivot_wider(names_from = Var1) %>%   mutate(hatch = paste(\"Hatchery production\", hatch) %>% factor(levels = paste(\"Hatchery production\", c(0, 5, 10, 15) * 1000)))  g <- ggplot(PNI_ts, aes(Year)) +   geom_line(aes(y = `50%`, colour = factor(kappa))) +   geom_ribbon(linetype = 3, alpha = 0.1, aes(ymin = `2.5%`, ymax = `97.5%`, fill = factor(kappa))) +   facet_wrap(vars(hatch)) +   labs(x = \"Projection Year\", y = \"PNI\", colour = \"Compensation\\nratio\", fill = \"Compensation\\nratio\") +   theme(legend.position = \"bottom\") g Design_txt <- Design Design_txt[, 1] <- factor(paste(\"Productivity =\", Design[, 1]),                           levels = paste(\"Productivity =\", c(9, 6, 3))) Design_txt[, 2] <- factor(paste(\"Hatchery production\", Design[, 2]),                           levels = paste(\"Hatchery production\", c(0, 5000, 10000, 15000)))  compare_spawners(SMSE_list, Design_txt) +   coord_cartesian(ylim = c(0, 75), expand = FALSE)  compare_fitness(SMSE_list, Design_txt)"},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"variable-definitions","dir":"Articles","previous_headings":"","what":"Variable definitions","title":"Dynamics equations","text":"Definition variable names corresponding slots either input (SOM) output (SMSE) objects salmonMSE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"natural-production-1","dir":"Articles","previous_headings":"","what":"Natural production","title":"Dynamics equations","text":"First, consider natural production absence fitness effects arising hatchery production.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"spawning-output","dir":"Articles","previous_headings":"Natural production","what":"Spawning output","title":"Dynamics equations","text":"spawners (NOS HOS) age aa year yy, corresponding spawning output (units eggs) subsequent generation calculated : EggyNOS=∑aNOSy,×pfemale×FecaEggyHOS=∑aHOSeffy,×pfemale×Feca\\begin{align} \\textrm{Egg}^\\textrm{NOS}_y &= \\sum_a\\textrm{NOS}_{y,} \\times p^\\textrm{female} \\times \\textrm{Fec}_a\\\\ \\textrm{Egg}^\\textrm{HOS}_y &= \\sum_a\\textrm{HOS}_{\\textrm{eff}y,} \\times p^\\textrm{female} \\times \\textrm{Fec}_a \\end{align} HOSeff=γ×HOS\\textrm{HOS}_{\\textrm{eff}} = \\gamma \\times \\textrm{HOS} superscript denotes parentage progeny.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"smolt-production---no-habitat-modeling","dir":"Articles","previous_headings":"Natural production","what":"Smolt production - no habitat modeling","title":"Dynamics equations","text":"habitat modeling used, fry production assumed equal spawning output, .e., Fryy+1NOS=EggyNOS\\textrm{Fry}^\\textrm{NOS}_{y+1} = \\textrm{Egg}^\\textrm{NOS}_y FryyHOS=EggyHOS\\textrm{Fry}^\\textrm{HOS}_y = \\textrm{Egg}^\\textrm{HOS}_y. Survival egg smolt life stage density-dependent. Beverton-Holt stock-recruit relationship, age-1 smolt production Smolty+1NOS=α×Fryy+1NOS1+β(Fryy+1NOS+Fryy+1HOS+ny+1sub)Smolty+1HOS=α×Fryy+1HOS1+β(Fryy+1NOS+Fryy+1HOS+ny+1sub)\\begin{align} \\textrm{Smolt}^\\textrm{NOS}_{y+1} &= \\frac{\\alpha \\times  \\textrm{Fry}^\\textrm{NOS}_{y+1}}{1 + \\beta(\\textrm{Fry}^\\textrm{NOS}_{y+1} + \\textrm{Fry}^\\textrm{HOS}_{y+1} + n^\\textrm{sub}_{y+1})}\\\\ \\textrm{Smolt}^\\textrm{HOS}_{y+1} &= \\frac{\\alpha \\times  \\textrm{Fry}^\\textrm{HOS}_{y+1}}{1 + \\beta(\\textrm{Fry}^\\textrm{NOS}_{y+1} + \\textrm{Fry}^\\textrm{HOS}_{y+1} + n^\\textrm{sub}_{y+1})} \\end{align} α=κ/ϕ\\alpha = \\kappa/\\phi, β=α/Cegg-smolt\\beta = \\alpha/{C_\\textrm{egg-smolt}}, unfished egg per smolt ϕ=∑(∏=1a−1exp(−MiNOS)(1−ri))×ra×pfemale×Feca\\phi = \\sum_a\\left(\\prod_{=1}^{-1}\\exp(-M^\\textrm{NOS}_i)(1-r_i)\\right)\\times r_a \\times p^\\textrm{female} \\times \\textrm{Fec}_a, rar_a maturity age. Smolt production can predicted total adult spawners setting Feca=1\\textrm{Fec}_a = 1 ϕ=1\\phi = 1. density-independent component survival equation controlled α\\alpha density-dependent component survival controlled β\\beta scaled total number fry competition subyearling hatchery releases (see Hatchery section). knife-edge maturity, .e., fish mature terminal age, equation simplifies ϕ=SAR×pfemale×Fec\\phi = \\textrm{SAR} \\times p^\\textrm{female} \\times \\textrm{Fec}, SAR\\textrm{SAR} marine survival (0-1). Ricker stock-recruit relationship, smolt production Smolty+1NOS=α×Fryy+1NOS×exp(−β[Fryy+1NOS+Fryy+1HOS+ny+1sub])Smolty+1HOS=α×Fryy+1HOS×exp(−β[Fryy+1NOS+Fryy+1HOS+ny+1sub])\\begin{align} \\textrm{Smolt}^\\textrm{NOS}_{y+1} &= \\alpha \\times  \\textrm{Fry}^\\textrm{NOS}_{y+1}\\times\\exp(-\\beta[\\textrm{Fry}^\\textrm{NOS}_{y+1} + \\textrm{Fry}^\\textrm{HOS}_{y+1} + n^\\textrm{sub}_{y+1}])\\\\ \\textrm{Smolt}^\\textrm{HOS}_{y+1} &= \\alpha \\times  \\textrm{Fry}^\\textrm{HOS}_{y+1}\\times\\exp(-\\beta[\\textrm{Fry}^\\textrm{NOS}_{y+1} + \\textrm{Fry}^\\textrm{HOS}_{y+1} + n^\\textrm{sub}_{y+1}]) \\end{align} α=κ/ϕ\\alpha = \\kappa/\\phi β=1/Smax\\beta = 1/{S_\\textrm{max}}, SmaxS_\\textrm{max} egg production maximizes smolt production.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"smolt-production---habitat-modeling","dir":"Articles","previous_headings":"Natural production","what":"Smolt production - habitat modeling","title":"Dynamics equations","text":"Egg smolt production can also modeled series density-dependent functions life stage, following approach Jorgensen et al. 2021. Three relationships modeled. realized egg production (Egg̃y\\widetilde{\\textrm{Egg}}_y) can modified spawning output (Eggy\\textrm{Egg}_y) due incubation mortality. Beverton-Holt function: Egg̃yNOS=Pinc×EggyNOS1+PincCinc(EggyNOS+EggyHOS)Egg̃yHOS=Pinc×EggyHOS1+PincCinc(EggyNOS+EggyHOS)\\begin{align} \\widetilde{\\textrm{Egg}}^\\textrm{NOS}_y &= \\frac{P^\\textrm{inc} \\times  \\textrm{Egg}^\\textrm{NOS}_y}{1 + \\frac{P^\\textrm{inc}}{C^\\textrm{inc}}(\\textrm{Egg}^\\textrm{NOS}_y + \\textrm{Egg}^\\textrm{HOS}_y)}\\\\ \\widetilde{\\textrm{Egg}}^\\textrm{HOS}_y &= \\frac{P^\\textrm{inc} \\times  \\textrm{Egg}^\\textrm{HOS}_y}{1 + \\frac{P^\\textrm{inc}}{C^\\textrm{inc}}(\\textrm{Egg}^\\textrm{NOS}_y + \\textrm{Egg}^\\textrm{HOS}_y)} \\end{align} productivity PP maximum survival spawning output approaches zero CC asymptotic production. Set capacity infinite model density-independence. productivity parameter survival next life stage. Fry production modeled : Fryy+1NOS=Pegg-fry×Egg̃yNOS1+Pegg-fryCegg-fry(Egg̃yNOS+Egg̃yHOS)×εyegg-fryFryy+1HOS=Pegg-fry×Egg̃yHOS1+Pegg-fryCegg-fry(Egg̃yNOS+Egg̃yHOS)×εyegg-fry\\begin{align} \\textrm{Fry}^\\textrm{NOS}_{y+1} &= \\frac{P^\\textrm{egg-fry} \\times  \\widetilde{\\textrm{Egg}}^\\textrm{NOS}_y}{1 + \\frac{P^\\textrm{egg-fry}}{C^\\textrm{egg-fry}}(\\widetilde{\\textrm{Egg}}^\\textrm{NOS}_y + \\widetilde{\\textrm{Egg}}^\\textrm{HOS}_y)} \\times \\varepsilon^\\textrm{egg-fry}_y\\\\ \\textrm{Fry}^\\textrm{HOS}_{y+1} &= \\frac{P^\\textrm{egg-fry} \\times  \\widetilde{\\textrm{Egg}}^\\textrm{HOS}_y}{1 + \\frac{P^\\textrm{egg-fry}}{C^\\textrm{egg-fry}}(\\widetilde{\\textrm{Egg}}^\\textrm{NOS}_y + \\widetilde{\\textrm{Egg}}^\\textrm{HOS}_y)} \\times \\varepsilon^\\textrm{egg-fry}_y \\end{align} εyegg-fry\\varepsilon^\\textrm{egg-fry}_y year-specific deviation survival. can modeled function proposed time series environmental variables η\\eta, example, εyegg-fry=∏jf(ηy,j)\\varepsilon^\\textrm{egg-fry}_y = \\prod_j f(\\eta_{y,j}) εyegg-fry=∑jf(ηy,j)\\varepsilon^\\textrm{egg-fry}_y = \\sum_j f(\\eta_{y,j}). Similarly, smolt production modeled : SmoltyNOS=Pfry-smolt×FryyNOS1+Pfry-smoltCfry-smolt(FryyNOS+FryyHOS)×εyfry-smoltSmoltyHOS=Pfry-smolt×FryyHOS1+Pfry-smoltCfry-smolt(FryyNOS+FryyHOS)×εyfry-smolt\\begin{align} \\textrm{Smolt}^\\textrm{NOS}_y &= \\frac{P^\\textrm{fry-smolt} \\times  \\textrm{Fry}^\\textrm{NOS}_y}{1 + \\frac{P^\\textrm{fry-smolt}}{C^\\textrm{fry-smolt}}(\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y)} \\times \\varepsilon^\\textrm{fry-smolt}_y\\\\ \\textrm{Smolt}^\\textrm{HOS}_y &= \\frac{P^\\textrm{fry-smolt} \\times  \\textrm{Fry}^\\textrm{HOS}_y}{1 + \\frac{P^\\textrm{fry-smolt}}{C^\\textrm{fry-smolt}}(\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y)} \\times \\varepsilon^\\textrm{fry-smolt}_y \\end{align} Alternative scenarios changes productivity capacity parameters can used evaluate changes life stage survival habitat improvement mitigation measures part management strategy, climate regimes (low productivity vs. high productivity, low capacity vs. high capacity). increase capacity can arise restoration increases area suitable habitat. increase productivity can arise improvement habitat, e.g., sediment quality. Approaches HARP CEMPRA can inform productivity capacity parameters across life stages quantitative relationships habitat variables. life stages, hockey-stick formulation also possible. example: Egg̃yNOS={Pinc×EggyNOS,EggyNOS≤Cyinc*/PincCyinc*,otherwise \\widetilde{\\textrm{Egg}}^\\textrm{NOS}_y =  \\begin{cases} P^\\textrm{inc} \\times \\textrm{Egg}^\\textrm{NOS}_y &, \\textrm{Egg}^\\textrm{NOS}_y \\le C^\\textrm{inc*}_y/P^\\textrm{inc}\\\\ C^\\textrm{inc*}_y &, \\textrm{otherwise}\\\\ \\end{cases} Cyinc*=Cinc×EggyNOS/(EggyNOS+EggyHOS)C^\\textrm{inc*}_y = C^\\textrm{inc} \\times \\textrm{Egg}^\\textrm{NOS}_y/(\\textrm{Egg}^\\textrm{NOS}_y + \\textrm{Egg}^\\textrm{HOS}_y) capacity apportioned natural spawners based relative abundance.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"hatchery-production","dir":"Articles","previous_headings":"","what":"Hatchery production","title":"Dynamics equations","text":"Hatchery production controlled several sets variables specified analyst, roughly following AHA approach. first consideration specify target number annual releases sub-yearlings ntargetsubyearlingn^\\textrm{subyearling}_\\textrm{target} yearlings ntargetyearlingn^\\textrm{yearling}_\\textrm{target}. Yearlings intended represent hatchery releases immediately leave freshwater environment, subyearlings subject density-dependent survival competition natural production fry, e.g., reside freshwater environment period time leaving. Going backwards, corresponding number eggs needed reach target number depends egg survival life stages hatchery. corresponding number broodtake calculated target egg production based brood fecundity hatchery survival broodtake, non-selective respect age. additional consideration composition (natural vs. hatchery origin) -river broodtake. minimize genetic drift population due hatchery production, desirable maintain high proportion natural origin broodtake. controlled ptargetNOBp^\\textrm{NOB}_\\textrm{target}, desired proportion natural broodtake relative broodtake (specified amount available imported brood considered hatchery-origin purpose), can exceeded insufficient escapement natural origin fish. ability meet target depends mark rate hatchery origin fish. Thus, ptargetNOBp^\\textrm{NOB}_\\textrm{target} represents ratio unmarked fish projection (imported brood considered marked calculation, strays considered unmarked), realized pNOBp^\\textrm{NOB} reduced mark rate. Another consideration broodtake dynamics maintain high spawning natural origin fish. controlled pmaxNOBp^\\textrm{NOB}_\\textrm{max}, maximum allowable proportion natural origin escapement used broodtake. value never exceeded. following equations generate annual broodtake hatchery production state variables given constraints.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"broodtake","dir":"Articles","previous_headings":"Hatchery production","what":"Broodtake","title":"Dynamics equations","text":"annual target egg production hatchery calculated target releases Eggtarget,broodtake=ntargetyearlingsyearling+ntargetsubyearlingssubyearling \\textrm{Egg}_\\textrm{target,broodtake} = \\dfrac{n^\\textrm{yearling}_\\textrm{target}}{s^\\textrm{yearling}} + \\dfrac{n^\\textrm{subyearling}_\\textrm{target}}{s^\\textrm{subyearling}} ss corresponding survival term egg life stage. broodtake back-calculated target egg production. composition natural hatchery origin broodtake (NOB HOB, respectively) dependent mark rate mm target proportion NOB ptargetNOBp^\\textrm{NOB}_\\textrm{target}. mark rate 1, realized pNOB equal ptargetNOBp^\\textrm{NOB}_\\textrm{target} provided sufficient escapement. mark rate less one, ptargetNOBp^\\textrm{NOB}_\\textrm{target} reflects proportion unmarked fish broodtake, hatchery origin. Thus, realized pNOB less ptargetNOBp^\\textrm{NOB}_\\textrm{target}. mark rate zero, broodtake non-selective pNOB equal proportion natural origin escapement. escapement year yy, proportion pbroodtakep^\\textrm{broodtake} used broodtake: NOBy,=pybroodtake,unmarked×NORy,aescapement×senroute×pmaxescHOBy,aunmarked=pybroodtake,unmarked×(1−m)×phatchery×HORy,aescapement×senroute×pmaxescHOBy,amarked=pybroodtake,marked×m×phatchery×HORy,aescapement×senroute×pmaxesc\\begin{align} \\textrm{NOB}_{y,} &= p^\\textrm{broodtake,unmarked}_y \\times \\textrm{}^\\textrm{escapement}_{y,} \\times s_\\textrm{enroute} \\times p^\\textrm{esc}_\\textrm{max}\\\\  \\textrm{HOB}^\\textrm{unmarked}_{y,} &= p^\\textrm{broodtake,unmarked}_y \\times (1-m) \\times p^\\textrm{hatchery} \\times \\textrm{HOR}^\\textrm{escapement}_{y,} \\times s_\\textrm{enroute} \\times p^\\textrm{esc}_\\textrm{max}\\\\  \\textrm{HOB}^\\textrm{marked}_{y,} &= p^\\textrm{broodtake,marked}_y \\times m \\times p^\\textrm{hatchery} \\times \\textrm{HOR}^\\textrm{escapement}_{y,} \\times s_\\textrm{enroute} \\times p^\\textrm{esc}_\\textrm{max}  \\end{align} proportion available hatchery fish broodtake also reduced phatcheryp^\\textrm{hatchery}, can include fish swimming back hatchery removed spawning grounds. Additionally, proportion imported fish strays may used brood: Broody,aimport=pybroodtake,marked∑aBroodaavail,importHOBy,astray=pybroodtake,unmarked×Strayy,×senroute\\begin{align} \\textrm{Brood}^\\textrm{import}_{y,} &= p^\\textrm{broodtake,marked}_y \\sum_a \\textrm{Brood}^\\textrm{avail,import}_a\\\\ \\textrm{HOB}^\\textrm{stray}_{y,} &= p^\\textrm{broodtake,unmarked}_y \\times \\textrm{Stray}_{y,} \\times s_\\textrm{enroute} \\\\ \\end{align} availability natural hatchery origin fish depends escapement reduced en-route mortality can capped proportion denoted pmaxescp^\\textrm{esc}_\\textrm{max} parameter. realized hatchery egg production EggyNOB=∑aNOBy,×sprespawn×pfemale×FecabroodEggyHOB=∑(HOBy,amarked+HOBy,aunmarked)×sprespawn×pfemale×FecabroodEggyimport=∑aBroody,aimport×sprespawn×pfemale×FecabroodEggystray=∑aHOBy,astray×sprespawn×pfemale×Fecabrood\\begin{align} \\textrm{Egg}_\\textrm{y}^\\textrm{NOB} &= \\sum_a \\textrm{NOB}_{y,} \\times s^\\textrm{prespawn} \\times p^\\textrm{female} \\times \\textrm{Fec}^\\textrm{brood}_a\\\\ \\textrm{Egg}_\\textrm{y}^\\textrm{HOB} &= \\sum_a (\\textrm{HOB}^\\textrm{marked}_{y,} + \\textrm{HOB}^\\textrm{unmarked}_{y,}) \\times s^\\textrm{prespawn} \\times p^\\textrm{female} \\times \\textrm{Fec}^\\textrm{brood}_a\\\\ \\textrm{Egg}_\\textrm{y}^\\textrm{import} &= \\sum_a \\textrm{Brood}^\\textrm{import}_{y,} \\times s^\\textrm{prespawn} \\times p^\\textrm{female} \\times \\textrm{Fec}^\\textrm{brood}_a\\\\ \\textrm{Egg}_\\textrm{y}^\\textrm{stray} &= \\sum_a \\textrm{HOB}^\\textrm{stray}_{y,} \\times s^\\textrm{prespawn} \\times p^\\textrm{female} \\times \\textrm{Fec}^\\textrm{brood}_a\\\\ \\end{align} hatchery egg production subject survival term sprespawns^\\textrm{prespawn}. proportion pybroodtakep^\\textrm{broodtake}_y solved annually satisfy following conditions: ∑(NOBy,+HOBy,aunmarked+HOBy,astray)∑(NOBy,+HOBy,aunmarked+HOBy,amarked+HOBy,astray+Broody,aimport)=ptargetNOB\\dfrac{\\sum_a(\\textrm{NOB}_{y,} + \\textrm{HOB}^\\textrm{unmarked}_{y,} + \\textrm{HOB}^\\textrm{stray}_{y,})}{\\sum_a(\\textrm{NOB}_{y,} + \\textrm{HOB}^\\textrm{unmarked}_{y,} + \\textrm{HOB}^\\textrm{marked}_{y,} + \\textrm{HOB}^\\textrm{stray}_{y,} + \\textrm{Brood}^\\textrm{import}_{y,})} = p^\\textrm{NOB}_\\textrm{target} 0<pybroodtake,marked≤10 < p^\\textrm{broodtake,marked}_y \\le 1 0<pybroodtake,unmarked≤pmaxNOB0 < p^\\textrm{broodtake,unmarked}_y \\le p^\\textrm{NOB}_\\textrm{max} EggyNOB+EggyHOB+Eggyimport+Eggystray=Eggbroodtake\\textrm{Egg}_\\textrm{y}^\\textrm{NOB} + \\textrm{Egg}_\\textrm{y}^\\textrm{HOB} + \\textrm{Egg}_\\textrm{y}^\\textrm{import} + \\textrm{Egg}^\\textrm{stray}_y = \\textrm{Egg}_\\textrm{broodtake} target ratio ptargetNOBp^\\textrm{NOB}_\\textrm{target} reflects objective maintain high proportion natural origin fish broodtake, implementation dependent mark rate. maximum removal rate natural origin fish pmaxNOBp^\\textrm{NOB}_\\textrm{max} escapement pmaxescp^\\textrm{esc}_\\textrm{max} ensures high abundance natural origin spawners. total egg production given year can fail reach target insufficient unmarked escapement. case, unmarked take set maximum removal rate (pybroodtake,unmarked=pmaxNOBp^\\textrm{broodtake,unmarked}_y = p^\\textrm{NOB}_\\textrm{max}), remaining deficit egg production met using HOB (including strays imports).","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"smolt-releases","dir":"Articles","previous_headings":"Hatchery production","what":"Smolt releases","title":"Dynamics equations","text":"total hatchery egg production calculated, production yearlings subyearlings calculated ensure annual ratio equal target ratio. , parameter pyegg,yearlingp^\\textrm{egg,yearling}_y solved subject following conditions: Eggbrood,y=EggyNOB+EggyHOB+Eggyimport+Eggystray\\textrm{Egg}_\\textrm{brood,y} = \\textrm{Egg}_\\textrm{y}^\\textrm{NOB} + \\textrm{Egg}_\\textrm{y}^\\textrm{HOB} + \\textrm{Egg}^\\textrm{import}_y + \\textrm{Egg}^\\textrm{stray}_y ny+1yearling=pyegg,yearling×Eggbrood,y×syearlingn^\\textrm{yearling}_{y+1} = p^\\textrm{egg,yearling}_y \\times \\textrm{Egg}_\\textrm{brood,y} \\times s^\\textrm{yearling} ny+1subyearling=(1−pyegg,yearling)×Eggbrood,y×ssubyearlingn^\\textrm{subyearling}_{y+1} = (1 - p^\\textrm{egg,yearling}_y) \\times \\textrm{Egg}_\\textrm{brood,y} \\times s^\\textrm{subyearling} nyyearlingnysubyearling+nyyearling=ntargetyearlingntargetsubyearling+ntargetyearling\\frac{n^\\textrm{yearling}_y}{n^\\textrm{subyearling}_y + n^\\textrm{yearling}_y} = \\frac{n^\\textrm{yearling}_\\textrm{target}}{n^\\textrm{subyearling}_\\textrm{target} + n^\\textrm{yearling}_\\textrm{target}} total broodtake, smolt releases calculated Smolty+1Rel=ny+1yearling+α×ny+1subyearling1+β(Fryy+1NOS+Fryy+1HOS+ny+1subyearling) \\textrm{Smolt}^\\textrm{Rel}_{y+1} = n^\\textrm{yearling}_{y+1} + \\frac{\\alpha \\times n^\\textrm{subyearling}_{y+1}}{1 + \\beta(\\textrm{Fry}^\\textrm{NOS}_{y+1} + \\textrm{Fry}^\\textrm{HOS}_{y+1} + n^\\textrm{subyearling}_{y+1})} Smolty+1Rel=ny+1yearling+α×ny+1subyearling×exp(−β(Fryy+1NOS+Fryy+1HOS+ny+1subyearling)) \\textrm{Smolt}^\\textrm{Rel}_{y+1} = n^\\textrm{yearling}_{y+1} + \\alpha \\times n^\\textrm{subyearling}_{y+1} \\times \\exp(-\\beta(\\textrm{Fry}^\\textrm{NOS}_{y+1} + \\textrm{Fry}^\\textrm{HOS}_{y+1} + n^\\textrm{subyearling}_{y+1}))","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"pre-terminal-fishery","dir":"Articles","previous_headings":"","what":"Pre-terminal fishery","title":"Dynamics equations","text":"Let Ny,ajuvN^\\textrm{juv}_{y,} juvenile abundance population Ny,=1juv,NOS=SmoltyNOS+SmoltyHOSN^\\textrm{juv,NOS}_{y,=1} = \\textrm{Smolt}^\\textrm{NOS}_y + \\textrm{Smolt}^\\textrm{HOS}_y Ny,=1juv,HOS=SmoltRelN^\\textrm{juv,HOS}_{y,=1} = \\textrm{Smolt}^\\textrm{Rel}. superscript smolt variable corresponds parentage superscript NN denotes origin current cohort. Harvest uPTu^\\textrm{PT} pre-terminal (PT\\textrm{PT}) fishery, assuming mark-selective fishing, modeled seasonal process. kept catch KK Ky,aNOS,PT=(1−exp(−vaPTFyPT))Ny,ajuv,NOSKy,aHOS,PT=(1−exp(−vaPTFyPT))Ny,ajuv,HOS\\begin{align} K^\\textrm{NOS,PT}_{y,} &= \\left(1 - \\exp(-v^\\textrm{PT}_a F^\\textrm{PT}_y)\\right)N^\\textrm{juv,NOS}_{y,}\\\\ K^\\textrm{HOS,PT}_{y,} &= \\left(1 - \\exp(-v^\\textrm{PT}_a F^\\textrm{PT}_y)\\right)N^\\textrm{juv,HOS}_{y,}\\\\ \\end{align} instantaneous fishing mortality solved ratio total catch total vulnerable abundance equal specified harvest rate: uPT=∑aKy,aNOS,PT+∑aKy,aHOS,PT∑avaPT(Ny,ajuv,NOS+Ny,ajuv,HOS) u^\\textrm{PT} = \\dfrac{\\sum_a K^\\textrm{NOS,PT}_{y,} + \\sum_a K^\\textrm{HOS,PT}_{y,}}{\\sum_a v^\\textrm{PT}_a (N^\\textrm{juv,NOS}_{y,} + N^\\textrm{juv,HOS}_{y,})}","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"recruitment-and-maturity","dir":"Articles","previous_headings":"","what":"Recruitment and maturity","title":"Dynamics equations","text":"recruitment calculated survival juvenile fish pre-terminal harvest maturation: NORy,=Ny,ajuv,NOSexp(−vaFyPT)ry,aHORy,=Ny,ajuv,HOSexp(−vaFyPT)ry,\\begin{align} \\textrm{}_{y,} &= N^\\textrm{juv,NOS}_{y,}\\exp(-v_aF^\\textrm{PT}_y)r_{y,}\\\\ \\textrm{HOR}_{y,} &= N^\\textrm{juv,HOS}_{y,}\\exp(-v_aF^\\textrm{PT}_y)r_{y,} \\end{align} juvenile abundance following year consists fish mature subsequently survived natural mortality MM: Ny+1,+1juv,NOS=Ny,ajuv,NOSexp(−[vaFyPT+,aNOS])(1−ry,)Ny+1,+1juv,HOS=Ny,ajuv,HOSexp(−[vaFyPT+,aHOS])(1−ry,)\\begin{align} N^\\textrm{juv,NOS}_{y+1,+1} &= N^\\textrm{juv,NOS}_{y,}\\exp\\left(-[v_aF^\\textrm{PT}_y + M^\\textrm{NOS}_{y,}]\\right)(1 - r_{y,})\\\\ N^\\textrm{juv,HOS}_{y+1,+1} &= N^\\textrm{juv,HOS}_{y,}\\exp\\left(-[v_aF^\\textrm{PT}_y + M^\\textrm{HOS}_{y,}]\\right)(1 - r_{y,}) \\end{align} Natural mortality specified age class. Accordingly, mortality corresponds either freshwater marine survival depending age class.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"terminal-fishery","dir":"Articles","previous_headings":"Recruitment and maturity","what":"Terminal fishery","title":"Dynamics equations","text":"Assuming mark-selective fishing, retained catch terminal (T\\textrm{T}) fishery calculated harvest rate similarly pre-terminal fishery: Ky,aNOS,T=(1−exp(−vaTFyT))NORy,aKy,aHOS,T=(1−exp(−vaTFyT))HORy,\\begin{align} K^\\textrm{NOS,T}_{y,} &= \\left(1 - \\exp(-v^\\textrm{T}_a F^\\textrm{T}_y)\\right)\\textrm{}_{y,}\\\\ K^\\textrm{HOS,T}_{y,} &= \\left(1 - \\exp(-v^\\textrm{T}_a F^\\textrm{T}_y)\\right)\\textrm{HOR}_{y,}\\\\ \\end{align} subject uT=∑aKy,aNOS,T+∑aKy,aHOS,T∑avaT(NORy,+HORy,) u^\\textrm{T} = \\dfrac{\\sum_a K^\\textrm{NOS,T}_{y,} + \\sum_a K^\\textrm{HOS,T}_{y,}}{\\sum_a v^\\textrm{T}_a(\\textrm{}_{y,} +  \\textrm{HOR}_{y,})}","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"escapement-and-spawners","dir":"Articles","previous_headings":"","what":"Escapement and spawners","title":"Dynamics equations","text":"escapement consists survivors terminal fishery: NORy,aescapement=NORy,aexp(−vaFyT)HORy,aescapement=HORy,aexp(−vaFyT)\\begin{align} \\textrm{}^\\textrm{escapement}_{y,} &= \\textrm{}_{y,}\\exp(-v_aF^\\textrm{T}_y)\\\\ \\textrm{HOR}^\\textrm{escapement}_{y,} &= \\textrm{HOR}_{y,}\\exp(-v_aF^\\textrm{T}_y) \\end{align} abundance natural origin spawners consists escapement survive migration spawning ground (senroutes_\\textrm{enroute}) removed brood: NOSy,=NORy,aescapement×senroute−NOBy,\\textrm{NOS}_{y,} = \\textrm{}^\\textrm{escapement}_{y,} \\times s_\\textrm{enroute} - \\textrm{NOB}_{y,} hatchery origin spawners escapement local origin survive migration, return hatchery (either swim-facilities -river collection), removed spawning ground (proportion premovalHOSp^\\textrm{HOS}_\\textrm{removal} discounted mark rate, animals available brood). Strays used brood also included hatchery spawners. HOSy,=HOSy,alocal+HOSy,astray=(1−phatchery)(1−premovalHOS×m)HORy,aescapement×senroute+(Strayy,−HOBy,astray)\\begin{align} \\textrm{HOS}_{y,} &= \\textrm{HOS}^\\textrm{local}_{y,} + \\textrm{HOS}^\\textrm{stray}_{y,}\\\\ &= (1 - p^\\textrm{hatchery}) (1 - p^\\textrm{HOS}_\\textrm{removal} \\times m) \\textrm{HOR}^\\textrm{escapement}_{y,} \\times s_\\textrm{enroute} + (\\textrm{Stray}_{y,} - \\textrm{HOB}^\\textrm{stray}_{y,}) \\end{align}","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"fitness-effects-on-survival","dir":"Articles","previous_headings":"","what":"Fitness effects on survival","title":"Dynamics equations","text":"Reproductive success first generation hatchery fish observed lower natural counterparts, accounted γ\\gamma parameter (see review Withler et al. 2018). genetic epigenetic factors, survival hatchery juveniles hatchery environment selects fish phenotype best adapted environment, likewise juveniles spawned natural environment. Since traits heritable, fitness natural population can shift away optimum natural environment towards hatchery environment evolutionary time scale, .e., number generations, hatchery fish allowed spawn. described Ford 2002 derived Lande 1976, fitness loss function WW individual phenotypic trait value zz given environment W(z)=exp(−(z−θ)22ω2) W(z) = \\exp\\left(\\dfrac{-(z-\\theta)^2}{2\\omega^2}\\right) θ\\theta optimum environment ω2\\omega^2 fitness variance. phenotypic trait value zz population random normal variable mean z‾\\bar{z} variance σ2\\sigma^2, mean fitness population generation gg W‾(z)=∫W(z)f(z)dz\\bar{W}(z) = \\int W(z) f(z) dz, f(z)f(z) Gaussian probability density function. solution proportional W‾(z)∝exp(−(z‾−θ)22(ω+σ)2) \\bar{W}(z) \\propto \\exp\\left(\\dfrac{-(\\bar{z}-\\theta)^2}{2(\\omega+\\sigma)^2}\\right) mean phenotype z‾\\bar{z} calculated iteratively, change Δz‾\\Delta\\bar{z} generation g−1g-1 gg Δz‾=z‾g−z‾g−1=(z‾g−1′−z‾g−1)h2z‾g=z‾g−1+(z‾g−1′−z‾g−1)h2\\begin{align} \\Delta\\bar{z} &= \\bar{z}_g - \\bar{z}_{g-1} = (\\bar{z}^\\prime_{g-1} - \\bar{z}_{g-1})h^2\\\\ \\bar{z}_g &= \\bar{z}_{g-1} + (\\bar{z}^\\prime_{g-1} - \\bar{z}_{g-1})h^2\\\\ \\end{align} h2h^2 heritability zz z‾g−1′\\bar{z}^\\prime_{g-1} trait value applying fitness function, defined : z‾g−1′=1W‾g−1∫Wg−1(z)×zf(z)dz=z‾g−1ω2+θσ2ω2+σ2\\begin{align} \\bar{z}^\\prime_{g-1} &= \\dfrac{1}{\\bar{W}_{g-1}}\\int W_{g-1}(z)\\times zf(z)dz\\\\ &= \\dfrac{\\bar{z}_{g-1}\\omega^2 + \\theta \\sigma^2}{\\omega^2 + \\sigma^2} \\end{align} Let z‾g−1′(θ)\\bar{z}^\\prime_{g-1}(\\theta) function returns mean trait value selection environment optimum value θ\\theta. hatchery program, mean trait value progeny natural environment weighted average mean trait value natural hatchery origin spawners, selection natural environment, .e., optimum trait value θnatural\\theta^\\textrm{natural}: z‾gnatural=(1−pg−1HOSeff)×(z‾g−1natural+[z‾g−1′natural(θnatural)−z‾g−1natural]h2)+pg−1HOSeff×(z‾g−1hatchery+[z‾g−1′hatchery(θnatural)−z‾g−1hatchery]h2)\\begin{align} \\bar{z}^\\textrm{natural}_g = & (1 - p^\\textrm{HOSeff}_{g-1}) \\times \\left(\\bar{z}^\\textrm{natural}_{g-1} + [\\bar{z}^{\\prime\\textrm{natural}}_{g-1}(\\theta^\\textrm{natural}) - \\bar{z}^\\textrm{natural}_{g-1}] h^2\\right) +\\\\ & p^\\textrm{HOSeff}_{g-1} \\times \\left(\\bar{z}^\\textrm{hatchery}_{g-1} + [\\bar{z}^{\\prime\\textrm{hatchery}}_{g-1}(\\theta^\\textrm{natural}) - \\bar{z}^\\textrm{hatchery}_{g-1}] h^2\\right) \\end{align} pHOSeff=γ×HOS/(NOS+γ×HOS)p^\\textrm{HOSeff} = \\gamma\\times\\textrm{HOS}/(\\textrm{NOS} + \\gamma\\times\\textrm{HOS}). Similarly, mean trait value hatchery environment z‾ghatchery\\bar{z}^\\textrm{hatchery}_g weighted average mean trait value natural hatchery broodtake, selection hatchery environment, .e., optimum trait value θhatchery\\theta^\\textrm{hatchery}: z‾ghatchery=pg−1NOB×(z‾g−1natural+[z‾g−1′natural(θhatchery)−z‾g−1natural]h2)+(1−pg−1NOB)×(z‾g−1hatchery+[z‾g−1′hatchery(θhatchery)−z‾g−1hatchery]h2)\\begin{align} \\bar{z}^\\textrm{hatchery}_g = & p^\\textrm{NOB}_{g-1} \\times \\left(\\bar{z}^\\textrm{natural}_{g-1} + [\\bar{z}^{\\prime\\textrm{natural}}_{g-1}(\\theta^\\textrm{hatchery}) - \\bar{z}^\\textrm{natural}_{g-1}] h^2\\right) +\\\\ & (1 - p^\\textrm{NOB}_{g-1}) \\times \\left(\\bar{z}^\\textrm{hatchery}_{g-1} + [\\bar{z}^{\\prime\\textrm{hatchery}}_{g-1}(\\theta^\\textrm{hatchery}) - \\bar{z}^\\textrm{hatchery}_{g-1}] h^2\\right) \\end{align} pNOB=NOB/(NOB+HOB)p^\\textrm{NOB} = \\textrm{NOB}/(\\textrm{NOB} + \\textrm{HOB}). fitness variance ω2\\omega^2 phenotype variance σ2\\sigma^2 assumed constant two environments. fitness variance parameterized relative variance phenotype, .e., ω=Ωσ\\omega = \\Omega \\sigma Ω\\Omega “selection strength”. mean fitness generation gg natural environment : W‾gnatural=exp(−(z‾gnatural−θnatural)22(ω+σ)2) \\bar{W}^\\textrm{natural}_g = \\exp\\left(\\dfrac{-(\\bar{z}^\\textrm{natural}_g-\\theta^\\textrm{natural})^2}{2(\\omega+\\sigma)^2}\\right)","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"mixed-brood-year-return","dir":"Articles","previous_headings":"Fitness effects on survival","what":"Mixed brood-year return","title":"Dynamics equations","text":"mixed-brood year return year yy across several ages aa produces smolt cohort year y+1y+1, mean trait value progeny calculated weighted average brood year age class fecundity: z‾y+1natural=∑apy,aNOS×(z‾y−+1natural+[z‾y−+1′natural(θnatural)−z‾y−+1natural]h2)+∑apy,aHOSeff×(z‾y−+1hatchery+[z‾y−+1′hatchery(θnatural)−z‾y−+1hatchery]h2)\\begin{align} \\bar{z}^\\textrm{natural}_{y+1} = & \\sum_a p^\\textrm{NOS}_{y,} \\times \\left(\\bar{z}^\\textrm{natural}_{y-+1} + [\\bar{z}^{\\prime\\textrm{natural}}_{y-+1}(\\theta^\\textrm{natural}) - \\bar{z}^\\textrm{natural}_{y-+1}] h^2\\right) +\\\\ & \\sum_a p^\\textrm{HOSeff}_{y,} \\times \\left(\\bar{z}^\\textrm{hatchery}_{y-+1} + [\\bar{z}^{\\prime\\textrm{hatchery}}_{y-+1}(\\theta^\\textrm{natural}) - \\bar{z}^\\textrm{hatchery}_{y-+1}] h^2\\right) \\end{align} z‾y+1hatchery=∑apy,aNOB×(z‾y−+1natural+[z‾y−+1′natural(θhatchery)−z‾y−+1natural]h2)+∑apy,aHOB×(z‾y−+1hatchery+[z‾y−+1′hatchery(θhatchery)−z‾y−+1hatchery]h2)\\begin{align} \\bar{z}^\\textrm{hatchery}_{y+1} = & \\sum_a p^\\textrm{NOB}_{y,} \\times \\left(\\bar{z}^\\textrm{natural}_{y-+1} + [\\bar{z}^{\\prime\\textrm{natural}}_{y-+1}(\\theta^\\textrm{hatchery}) - \\bar{z}^\\textrm{natural}_{y-+1}] h^2\\right) +\\\\ & \\sum_a p^\\textrm{HOB}_{y,} \\times \\left(\\bar{z}^\\textrm{hatchery}_{y-+1} + [\\bar{z}^{\\prime\\textrm{hatchery}}_{y-+1}(\\theta^\\textrm{hatchery}) - \\bar{z}^\\textrm{hatchery}_{y-+1}] h^2\\right) \\end{align} py,aNOS=Feca×NOSy,∑aFeca(NOSy,+γ×HOSy,)p^\\textrm{NOS}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\textrm{NOS}_{y,}}{\\sum_a\\textrm{Fec}_a(\\textrm{NOS}_{y,} + \\gamma \\times \\textrm{HOS}_{y,})} py,aHOSeff=Feca×γ×HOSy,∑aFeca(NOSy,+γ×HOSy,)p^\\textrm{HOSeff}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\gamma \\times \\textrm{HOS}_{y,}}{\\sum_a\\textrm{Fec}_a(\\textrm{NOS}_{y,} + \\gamma \\times \\textrm{HOS}_{y,})} py,aNOB=Fecabrood×NOBy,∑aFecabrood(NOBy,+HOBy,+Broody,aimport)p^\\textrm{NOB}_{y,} = \\dfrac{\\textrm{Fec}^\\textrm{brood}_a \\times \\textrm{NOB}_{y,}}{\\sum_a\\textrm{Fec}^\\textrm{brood}_a(\\textrm{NOB}_{y,} + \\textrm{HOB}_{y,} + \\textrm{Brood}^\\textrm{import}_{y,})} py,aHOB=Fecabrood×(HOBy,+Broody,aimport)∑aFecabrood(NOBy,+HOBy,+Broody,aimport)p^\\textrm{HOB}_{y,} = \\dfrac{\\textrm{Fec}^\\textrm{brood}_a \\times (\\textrm{HOB}_{y,} + \\textrm{Brood}^\\textrm{import}_{y,})}{\\sum_a\\textrm{Fec}^\\textrm{brood}_a(\\textrm{NOB}_{y,} + \\textrm{HOB}_{y,} + \\textrm{Brood}^\\textrm{import}_{y,})} Effective proportions, .e., weighting age-class fecundity, accounts older age classes fecund likely contribute production next cohort.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"fitness-loss","dir":"Articles","previous_headings":"Fitness effects on survival","what":"Fitness loss","title":"Dynamics equations","text":"Fitness can reduce survival egg, fry, immature life stages reducing productivity capacity parameters. modeling egg smolt density-dependence (absence habitat modeling), productivity parameter product base value reduced fitness loss function: Pyegg-smolt*=Pegg-smolt×(Wynat.)ℓegg×(Wynat.)ℓfryCyegg-smolt*=Cegg-smolt×(Wynat.)ℓegg×(Wynat.)ℓfryMy,aNOS=−log(exp(−,abase,NOS)×(Wy−anat.)ℓjuv)\\begin{align} P^\\textrm{egg-smolt*}_y &= P^\\textrm{egg-smolt} \\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{egg}}\\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{fry}}\\\\ C^\\textrm{egg-smolt*}_y &= C^\\textrm{egg-smolt} \\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{egg}}\\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{fry}} M^\\textrm{NOS}_{y,} &= -\\log(\\exp(-M^\\textrm{base,NOS}_{y,}) \\times (W^\\textrm{nat.}_{y-})^{\\ell_\\textrm{juv}}) \\end{align} ℓi\\ell_i proportion fitness loss apportioned life stage ii (either egg, fry, juvenile-marine), ∑iℓi=1\\sum_i \\ell_i = 1, density-dependent parameters. marine environment, age-specific natural survival reduced proportional fitness loss term modeled cohort effect. Ricker density-dependent survival, beta parameter adjusted βy*=1/[Smax×(Wynat.)ℓegg×(Wynat.)ℓfry]\\beta^*_y = 1/[S_\\textrm{max} \\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{egg}} \\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{fry}}]. habitat variables modeled, egg fry fitness losses adjust productivity capacity corresponding life stage: Pyegg-fry=Pegg-fry×(Wynat.)ℓeggPyfry-smolt=Pfry-smolt×(Wynat.)ℓfry\\begin{align} P^\\textrm{egg-fry}_y &= P^\\textrm{egg-fry} \\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{egg}}\\\\ P^\\textrm{fry-smolt}_y &= P^\\textrm{fry-smolt} \\times (W^\\textrm{nat.}_y)^{\\ell_\\textrm{fry}} \\end{align}","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"pni","dir":"Articles","previous_headings":"Fitness effects on survival","what":"PNI","title":"Dynamics equations","text":"PNI (proportionate natural influence) approximation rate gene flow hatchery natural environment, calculated progeny year y+1y+1 parental composition year yy: PNIy+1=∑apy,aNOB∑apy,aNOB+∑apy,aHOSeff \\textrm{PNI}_{y+1} = \\dfrac{\\sum_a p^{\\textrm{NOB}}_{y,}}{\\sum_a p^{\\textrm{NOB}}_{y,} + \\sum_a p^{\\textrm{HOSeff}}_{y,}} Generally, combination minimizing hatchery releases, increasing natural broodtake, reducing number hatchery origin spawners maintains high PNI, .e., low rate gene flow hatchery natural environment. natural origin broodtake, .e., brood imported, PNI calculated equation 6 Withler et al. 2018: PNIy+1=h2h2+(1−h2+ω2)∑apy,aHOSeff \\textrm{PNI}_{y+1} = \\dfrac{h^2}{h^2 + (1 - h^2 + \\omega^2) \\sum_a p^{\\textrm{HOSeff}}_{y,}}","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"wild-salmon","dir":"Articles","previous_headings":"Fitness effects on survival","what":"Wild salmon","title":"Dynamics equations","text":"single brood-year returns, proportion wild salmon, natural origin spawners whose parents also natural spawners, can calculated pgWILD=(1−pgHOScensus)×(1−pg−1HOScensus)2(1−pg−1HOScensus)2+2γ×pg−1HOScensus(1−pg−1HOScensus)+γ2(pg−1HOScensus)2 p^\\textrm{WILD}_g = (1 - p^\\textrm{HOScensus}_g) \\times \\dfrac{(1 - p^\\textrm{HOScensus}_{g-1})^2} {(1 - p^\\textrm{HOScensus}_{g-1})^2 + 2 \\gamma \\times p^\\textrm{HOScensus}_{g-1}(1 - p^\\textrm{HOScensus}_{g-1}) + \\gamma^2 (p^\\textrm{HOScensus}_{g-1})^2} pHOScensus=HOS/(HOS+NOS)p^\\textrm{HOScensus} = \\textrm{HOS}/(\\textrm{HOS} + \\textrm{NOS}). first term proportion natural spawners current generation gg. ratio comprising second term discounts proportion current generation include natural spawners whose parents natural spawners. Assuming non-assortative mating, three terms denominator gives composition generation gg whose parents natural origin, mixed origin (one parent natural origin hatchery origin), hatchery origin. generalize mixed-brood year return, calculate probability weighted across brood-years age class fecundity: pyWILD=∑aNOSy,∑′(NOSy,′+HOSy,′)×(∑′py−,′NOScensus)2(∑′py−,′NOScensus)2+2γ×(∑′py−,′NOScensus)(∑′py−,′HOScensus)+γ2(∑′py−,′HOScensus)2 p^\\textrm{WILD}_y = \\sum_a \\dfrac{\\textrm{NOS}_{y,}}{\\sum_{'}(\\textrm{NOS}_{y,'} + \\textrm{HOS}_{y,'})} \\times \\dfrac{(\\sum_{'} p^\\textrm{NOScensus}_{y-,'})^2} {(\\sum_{'} p^\\textrm{NOScensus}_{y-,'})^2 + 2 \\gamma \\times (\\sum_{'}p^\\textrm{NOScensus}_{y-,'})(\\sum_{'}p^\\textrm{HOScensus}_{y-,'}) + \\gamma^2 (\\sum_{'}p^\\textrm{HOScensus}_{y-,'})^2} py,aNOScensus=Feca×NOSy,∑aFeca(NOSy,+HOSy,)p^\\textrm{NOScensus}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\textrm{NOS}_{y,}}{\\sum_a{\\textrm{Fec}_a (\\textrm{NOS}_{y,}} + \\textrm{HOS}_{y,})} py,aHOScensus=Feca×HOSy,∑aFeca(NOSy,+HOSy,)p^\\textrm{HOScensus}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\textrm{HOS}_{y,}}{\\sum_a{\\textrm{Fec}_a (\\textrm{NOS}_{y,}} + \\textrm{HOS}_{y,})} probability finding wild salmon year yy sum probabilities finding wild salmon ages. age aa, first ratio probability finding natural spawner year yy. second ratio probability mating success two parental natural spawners year y−ay-using Punnett square, assuming non-assortative mating across age origin. summation across dummy age variable ′' calculates total proportion spawners given year. Effective proportions, .e., weighting age-class fecundity, parental composition accounts older age classes fecund likely contribute production offspring.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"mark-selective-fishing","dir":"Articles","previous_headings":"","what":"Mark-selective fishing","title":"Dynamics equations","text":"mark rate mm hatchery fish greater zero, mark-selective fishing implemented pre-terminal terminal fisheries. mark rate proxy retention harvest rate uharvestu^\\textrm{harvest} corresponds ratio kept catch abundance. exploitation rate uexploitu^\\textrm{exploit} calculated kept catch dead releases. Exploitation rates differ hatchery natural origin fish retention latter. Let instantaneous fishing mortality kept catch released catch Fkept=mEFrel.=(1−m)δE\\begin{align} F^\\textrm{kept} &= \\\\ F^\\textrm{rel.} &= (1 - m)\\delta E \\end{align} δ\\delta proportion released fish die. EE index fishing effort, also referred encounter rate fishery, links together FkeptF^\\textrm{kept} Frel.F^\\textrm{rel.}. Intuitively, fishing effort can increase mark-selective fishery compared non-selective fishery. example, mark rate 20 percent, fishing effort 500 percent higher non-selective fishery order attain kept quota bag limit. Additional catch release mortality occurs un-marked fish, according δ\\delta. pre-terminal (PT\\textrm{PT}) fishery, EE solved satisfy following equation hatchery fish: uharvest,HOS,PT=∑aKy,aHOS,PT∑avaPTNy,ajuv,HOS u^\\textrm{harvest,HOS,PT} = \\dfrac{\\sum_aK^\\textrm{HOS,PT}_{y,}}{\\sum_a v^\\textrm{PT}_a N^\\textrm{juv,HOS}_{y,}} kept catch KK Ky,aHOS,PT=Fykept,PTFykept,PT+Fyrel,PT(1−exp(−vaPT[Fkept,PT+Frel,PT]))Ny,ajuv,HOSK^\\textrm{HOS,PT}_{y,} = \\dfrac{F^\\textrm{kept,PT}_y}{F^\\textrm{kept,PT}_y + F^\\textrm{rel,PT}_y}\\left(1 - \\exp(-v^\\textrm{PT}_a[F^\\textrm{kept,PT} + F^\\textrm{rel,PT}])\\right)N^\\textrm{juv,HOS}_{y,}. exploitation rate natural origin fish calculated dead discards. exploitation rate hatchery origin fish calculated kept catch dead discards: uyexploit,NOS,PT=∑(1−exp(−vaFyrel.,PT))Ny,ajuv,NOS∑avaPTNy,ajuv,NOSuyexploit,HOS,PT=∑(1−exp(−va[Fykept,PT+Fyrel.,PT]))Ny,ajuv,HOS∑avaPTNy,ajuv,HOS\\begin{align} u^\\textrm{exploit,NOS,PT}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a F^\\textrm{rel.,PT}_y))N^\\textrm{juv,NOS}_{y,}}{\\sum_a v^\\textrm{PT}_a N^\\textrm{juv,NOS}_{y,}}\\\\ u^\\textrm{exploit,HOS,PT}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a[F^\\textrm{kept,PT}_y + F^\\textrm{rel.,PT}_y]))N^\\textrm{juv,HOS}_{y,}}{\\sum_a v^\\textrm{PT}_a N^\\textrm{juv,HOS}_{y,}} \\end{align} Similarly, terminal fishery, fishing effort satisfies equation uharvest,HOS,T=∑aKy,aHOS,T∑avaTHORy,u^\\textrm{harvest,HOS,T} = \\dfrac{\\sum_aK^\\textrm{HOS,T}_{y,}}{\\sum_a v^\\textrm{T}_a \\textrm{HOR}_{y,}} corresponding exploitation rates: uyexploit,NOS,T=∑(1−exp(−vaFyrel,T))NORy,∑avaTNORy,auyexploit,HOS,T=∑(1−exp(−va[Fykept,T+Fyrel.,T]))HORy,∑avaTHORy,\\begin{align} u^\\textrm{exploit,NOS,T}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a F^\\textrm{rel,T}_y))\\textrm{}_{y,}}{\\sum_a v^\\textrm{T}_a \\textrm{}_{y,}}\\\\ u^\\textrm{exploit,HOS,T}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a[F^\\textrm{kept,T}_y + F^\\textrm{rel.,T}_y]))\\textrm{HOR}_{y,}}{\\sum_a v^\\textrm{T}_a \\textrm{HOR}_{y,}} \\end{align}","code":""},{"path":"https://docs.salmonmse.com/articles/example.html","id":"stochastic-simulations","dir":"Articles","previous_headings":"","what":"Stochastic simulations","title":"Simple salmonMSE example","text":"Let’s repeat simple example stochasticity productivity parameter (“kappa”, units recruits/spawner). , sample productivity distribution run 100 simulations. incorporates uncertainty understanding natural productivity evaluation management strategy.  Histogram productivity (kappa) values sampled stochastic operating model. expect distribution state variables projection. Let’s take look PNI, can plot median 95 percent range values annually projection:  distribution PNI last projection year:  models, can develop performance metrics make probabilistic statements system dynamics set management actions. example, calculate long-term probability PNI least 0.80: quantiles can also calculated performance metric stochastic replicates: relationship performance metrics productivity:  summary Markdown report can generated report() function:","code":"SAR <- 0.01  nsim_stochastic <- 100  # Sample productivity set.seed(100) kappa_mean <- 3 kappa_sd <- 0.3 kappa <- rlnorm(nsim_stochastic, log(kappa_mean) - 0.5 * kappa_sd^2, kappa_sd)  Bio_stochastic <- new(   \"Bio\",   maxage = 3,   p_mature = c(0, 0, 1),   SRrel = \"BH\",   capacity = 17250,   kappa = kappa,   Mjuv_NOS = c(0, -log(SAR), 0),   fec = c(0, 0, 5040),   p_female = 0.49,   s_enroute = 1 )  nyears <- 2 HistN <- array(0, c(nsim_stochastic, Bio_stochastic@maxage, nyears+1)) HistN[, 1, 1] <- HistN[, 2, 2] <- 1000/SAR  Historical <- new(   \"Historical\",   HistNjuv_NOS = HistN,   HistNjuv_HOS = HistN )  SOM_stochastic <- new(   \"SOM\",   Bio_stochastic, Habitat, Hatchery, Harvest, Historical,   nsim = nsim_stochastic, nyears = 2, proyears = 50 )  SMSE_stochastic <- salmonMSE(SOM_stochastic) plot_statevar_ts(SMSE_stochastic, \"PNI\", quant = TRUE) plot_statevar_hist(SMSE_stochastic, \"PNI\", y = 49) PNI_LT <- SMSE_stochastic@PNI[, 1, 49] mean(PNI_LT >= 0.5) #> [1] 0.13 quantile(PNI_LT, c(0.025, 0.5, 0.975)) #>      2.5%       50%     97.5%  #> 0.6266439 0.7634803 0.8133749 report(SMSE_stochastic)"},{"path":"https://docs.salmonmse.com/articles/introduction.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction","text":"salmonMSE quantitative stochastic decision-support tool Pacific salmon focusing strategic trade-offs among harvest, hatchery habitat management levers. salmonMSE can used risk-based analyses evaluate performance prioritize management actions identify trade-offs towards achieving biological harvest objectives Initial development salmonMSE based -H Analyzer (AHA) spreadsheet models salmon dynamics individual stocks life stages successive generations obtain long-term equilibrium properties state dynamics. Currently, salmonMSE intended used similarly, expands upon population dynamics modeling several ways. accommodate complex life histories, salmonMSE age-structured useful species multiple cohorts overlapping return. Multi-stock models can developed evaluate outcomes stock management unit. Finally, stochasticity can incorporated model incorporate uncertainty understanding stock productivity. openMSE population dynamics model underlying salmonMSE. openMSE intended evaluation management strategies marine fisheries, functionality software can re-purposed model salmon life stages. state variables therefore directly modeled within openMSE, additional state variables needed salmon life history calculated salmonMSE. information, see article population dynamics model. Use openMSE allows rigorous review source code wider user base. However, typical users salmonMSE need see internal conversion salmonMSE openMSE operating models. Inputs outputs salmonMSE use salmon-specific terminology.","code":""},{"path":"https://docs.salmonmse.com/articles/introduction.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Introduction","text":"salmon operating model contains parameters population dynamics management levers implemented. salmonMSE, object class SOM can created constituent objects class Bio, Habitat, Hatchery, Harvest follows: Bio class specifies natural production, example, maturity, fecundity, stock-recruit relationship, marine survival. Habitat class (optional) specifies freshwater survival egg, fry, smolt life stages series density-dependent functions, options time-varying survival, example, function environmental habitat mitigation/restoration actions. Hatchery class specifies parameters surrounding hatchery production, number target releases, removal hatchery spawners maintain high proportions natural spawners, population fitness parameters arising interbreeding hatchery natural spawners. Harvest class specifies exploitation rate harvest control rules fishery. Additional slots SOM class control projections, example, number years simulation replicates. Details slots various S4 classes can obtained typing class?SOM R console. simulation can run salmonMSE() function: output class SMSE object containing state variables performance metrics pertaining hatchery dynamics (fitness, PNI, etc.) arrays typically indexed simulation, stock, age, year. example, SMSE@NOS reports natural origin spawners. convenience comparison purposes, salmonMSE distributes implementation AHA R well: resulting output named list following format SMSE object, indexed generation instead year. details also provided example article.","code":"library(salmonMSE)  Bio <- new(\"Bio\", ...) Habitat <- new(\"Habitat\", ...) Hatchery <- new(\"Hatchery\", ...) Harvest <- new(\"Harvest\", ...)  SOM <- new(\"SOM\", Bio, Hatchery, Habitat, Harvest) MSE <- salmonMSE(SOM) SAHA <- AHA(SOM)"},{"path":"https://docs.salmonmse.com/articles/introduction.html","id":"future-development","dir":"Articles","previous_headings":"","what":"Future development","title":"Introduction","text":"Development salmonMSE currently progress. Stochasticity incorporated stock-recruit relationship, predicts density-dependent smolt production eggs, SAR parameter (survival adult return). Multi-stock models yet supported.","code":""},{"path":"https://docs.salmonmse.com/articles/model.html","id":"multimse","dir":"Articles","previous_headings":"","what":"multiMSE","title":"Implementation of salmon dynamics","text":"salmonMSE takes advantage functionality multiMSE function MSEtool. multiMSE intended multi-population, multi-fleet modeling “population” unit can envisioned combination sex-specific single species model, multi-species model, multi-stock model. Relevant features include: Two-sex models spawning output predict recruitment population linear combination spawning output set populations model Hermaphroditism sex dynamics either females males switch sexes. Mechanistically, abundance moves one population another beginning time step based specified age schedule Inter-population intra-population dynamics biological parameter one population updated abundance biomass set custom written function (“MICE” modeling) Multi-fleet model can used allocate catches among populations fleets Salmon dynamics can represented mechanistically using functionalities: Multi-population models used model salmon life stages. salmon conservation unit (CU), three populations modeled represent immature, mature (recruitment), escapement life stage. Natural hatchery fish also separately modeled, thus, 6 population units needed hatchery CU 3 population units hatchery. Fish progress populations, .e., life stages, based maturity status. Movement fish recruitment escapement life stage occurs year maturity. cohorts advance next age class, life cycle ‘catches ’ generation time remains true real dynamics. next section. Total natural smolt production (immature natural origin fish) predicted spawning output natural hatchery spawners (two population units) function written salmonMSE passed openMSE. function also implements fitness dynamics reduces productivity based ratio hatchery spawners ratio natural broodtake. function also implements hatchery dynamics removing natural hatchery broodtake respective escapement specifies hatchery smolt releases immature hatchery origin fish. Another custom function specifies reduction marine survival due fitness loss multi-fleet model specifies harvest rates pre-terminal terminal fisheries  Representation life cycle stages (blue) modeled openMSE.","code":""},{"path":"https://docs.salmonmse.com/articles/model.html","id":"salmon-considerations","dir":"Articles","previous_headings":"","what":"Salmon considerations","title":"Implementation of salmon dynamics","text":"openMSE models fish populations age-structured array. , can accommodate mixed brood-year returns. additional complexities age structure needs adjusted order model salmon. openMSE, life stage resulting juvenile density-dependent survival occurs time step spawning occurs. However, smolt production occurs year spawning. Therefore, advance age structure escapement one extra year openMSE order ensure smolt production occurs correct time step. reporting array, escapement, abundance spawners, broodtake, egg production adjusted back appropriate biological year. absence hatchery, escapement number spawners. scenario, spawning output smolt production can calculated entirely within openMSE. hatchery, escapement subject broodtake removal hatchery fish spawning grounds. openMSE sees none hatchery dynamics. Instead, MICE function created salmonMSE read natural hatchery escapement openMSE, calculate broodtake, removal hatchery fish spawning grounds, calculate fitness, adjust stock-recruit parameters, apply fitness egg smolt production, return natural smolt production “recruitment deviation” openMSE. multiplicative term adjusts natural smolt production created hatchery (note ‘recruitment’ used refer life stage density-dependent survival, commonly used marine fisheries context, salmon return). function also calculate hatchery smolt releases absolute number openMSE. hermaphroditism feature openMSE, used salmonMSE assign maturity, occurs beginning time step. time, fishing mortality occurs course time step simultaneously natural mortality. However, salmon fisheries typically operate seasonally. pre-terminal fishery occurs early year, followed maturation subsequent terminal fishery later year. words, fish mature within given year vulnerable pre-terminal terminal fisheries. solve order operations problem, openMSE uses two seasonal time steps model full calendar year. pre-terminal fishery operates first half year (odd time steps), maturation happens beginning second half year (even time steps), terminal fishery operates second half year. Ocean mortality occurs immature component second half year. escapement, broodtake, spawning, smolt production operations occur beginning following year (odd time steps, see bullet 1). current front-end requires knowledge seasonal time steps, output reported annual basis.  Summary state variables stored either openMSE salmonMSE. intermediary section consists functions calculate state variables pertaining hatchery habitat management levers.","code":""},{"path":"https://docs.salmonmse.com/articles/model.html","id":"age-structured-representation","dir":"Articles","previous_headings":"","what":"Age-structured representation","title":"Implementation of salmon dynamics","text":"following figure illustrates age structure salmon matures age 3. matrix, abundance age zero age 1 represent abundance egg smolts, respectively. age 2, abundance may represent juvenile fish marine life stage (although may occur course ages 1 2) vulnerable pre-terminal fishery. maturity age 3, abundance beginning time step can return vulnerable terminal fishery. Later year, escapement number spawners also calculated.  Age-structured representation salmon life cycle fish mature age 3. colors represent three generations fish. Various constraints openMSE prevent implementation figure model. First, aren’t enough state variables within single time step calculate escapement implement hatchery broodtake return spawning. Second, density-dependent survival must occur within time step spawning. result, must advance age class additional placeholder age class maturity following year spawning actually occurs. However, can calculate necessary hatchery spawning dynamics, including egg production, salmonMSE merely pass smolt production back openMSE. result age structure ‘catches ’ generational life cycle, shown . Additionally, two seasonal time steps per calendar year needed model maturation cohort timing pre-terminal terminal fishery. result, immature salmon, vulnerability pre-terminal seasonal fishery occurs first half year ocean mortality occurs second half year. salmon mature, vulnerability terminal seasonal fishery occurs second half year. component cohort matures experience ocean mortality last year life.  Salmon age structure implemented openMSE. Missing state variables stored data frame salmonMSE simulation.","code":""},{"path":"https://docs.salmonmse.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Quang Huynh. Author, maintainer.","code":""},{"path":"https://docs.salmonmse.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Huynh Q (2025). salmonMSE: Salmonid Management Strategy Evaluation. R package version 0.0.0.9000, https://docs.salmonmse.com/.","code":"@Manual{,   title = {salmonMSE: Salmonid Management Strategy Evaluation},   author = {Quang Huynh},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://docs.salmonmse.com/}, }"},{"path":"https://docs.salmonmse.com/index.html","id":"salmonmse","dir":"","previous_headings":"","what":"Salmonid Management Strategy Evaluation","title":"Salmonid Management Strategy Evaluation","text":"Salmonid management strategy evaluation salmonMSE decision-support tool Pacific salmon focusing strategic trade-offs among harvest, hatchery habitat management levers. Funding development salmonMSE provided Pacific Salmon Strategy Initiative collaboration Department Fisheries Oceans Canada.","code":""},{"path":"https://docs.salmonmse.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Salmonid Management Strategy Evaluation","text":"Currently, salmonMSE requires developmental version MSEtool. can installed GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"Blue-Matter/MSEtool\") remotes::install_github(\"Blue-Matter/salmonMSE\")"},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":null,"dir":"Reference","previous_headings":"","what":"All-H Analyzer — AHA","title":"All-H Analyzer — AHA","text":"Wrapper function implementation -H Analyzer (AHA) R. Can used compare outputs AHA salmonMSE.","code":""},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-H Analyzer — AHA","text":"","code":"AHA(SOM, ngen = 100, silent = FALSE)"},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All-H Analyzer — AHA","text":"SOM object class SOM ngen Integer, number generations run simulation silent Logical, indicates whether silence messages R console","code":""},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All-H Analyzer — AHA","text":"named list containing vectors state variables (simulation, population, generation). See SMSE object description.","code":""},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"All-H Analyzer — AHA","text":"Hatchery Scientific Review Group. 2020. -H Analyzer Tool Guide Documentation. May 2020.","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls biological dynamics, .e., natural production.","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"Various parameters can stochastic (length nsim) input single numeric (value identical across simulations).","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name maxage Integer. maximum age population age structure. n_g Integer. Number life history groups within cohort. Life history groups (LHGs) sub-units cohort different biological parameters, e.g., survival, egg production smolt production next generation calculated sum across life history groups. Default 1. p_LHG proportion total egg production assigned life history group within cohort. example, Bio@n_g <- 2, Bio@p_LHG <- c(0.9, 0.1), 90 percent egg production first population assigned first life history group ten percent second LHG. Default rep(1/Bio@n_g, Bio@n_g) p_mature Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears]. proportion mature age. SRrel Character, stock-recruit relationship density-dependent smolt production fry. Either \"BH\" (Beverton-Holt) \"Ricker\". used habitat component used. See Habitat object. capacity Vector length nsim. asymptote Beverton-Holt stock-recruit function, Ricker maximum density-dependent natural smolt production egg production. Units smolts. used habitat component used. kappa Vector length nsim. adult productivity ratio stock-recruit function. Units recruits per spawner. Natural per-capita production recruits population approaches zero (density-independent component). stage-based models, equivalent product smolt productivity (smolts per spawner) marine survival. used habitat component used. Smax Vector length nsim. egg production maximizes smolt production Ricker stock-recruit function. Units eggs. Equivalent units spawners fec = 1 spawners. used habitat component used. phi Optional parameter, vector length nsim. Unfished egg production per smolt. Units egg per smolt. alpha parameter stock-recruit function ratio kappa phi. stage-based models, product marine survival, fecundity, proportion female. provided, phi calculated Mjuv_NOS, p_mature, s_enroute, p_female, fec, p_LHG corresponding first year weighted life history groups. used habitat component used. Mjuv_NOS Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears, n_g]. Natural mortality immature natural origin fish. replicate SAR parameter stage-specific model, set Mjuv_NOS[] = -log(SAR) age class prior maturation (zero ages). fec Vector age (length maxage). Female fecundity natural origin spawners. p_female Numeric. proportion females spawning population. Default 0.5. s_enroute Numeric. Survival escapement spawning grounds (spawning broodtake). Default 1.","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Bio\")","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Bio\") #> Class \"Bio\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                              #> Name:       Name    maxage       n_g     p_LHG  p_mature     SRrel  capacity #> Class: character   numeric   numeric   numeric num.array character   numeric #>                                                                              #> Name:      kappa      Smax       phi  Mjuv_NOS       fec  p_female s_enroute #> Class:   numeric   numeric   numeric num.array   numeric   numeric   numeric #>  #> Extends: \"Bio.list\""},{"path":"https://docs.salmonmse.com/reference/CM2SOM.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert conditioning model to operating model — CM2SOM","title":"Convert conditioning model to operating model — CM2SOM","text":"Creates operating model MCMC samples data inputs conditioning model. Management actions habitat, hatchery production, harvest still need specified operating model.","code":""},{"path":"https://docs.salmonmse.com/reference/CM2SOM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert conditioning model to operating model — CM2SOM","text":"","code":"CM2SOM(stanfit, sims, nsim = 2, seed = 1, proyears = 40)"},{"path":"https://docs.salmonmse.com/reference/CM2SOM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert conditioning model to operating model — CM2SOM","text":"stanfit Output sample_CM() sims Optional, vector integers indicating MCMC iterations convert operating model simulations. Otherwise, use argument nsim order sample subset MCMC. nsim Integer, total number simulations operating model. used sims missing. seed Integer, seed sampling MCMC output. used sims missing. proyears Integer, number projection years operating model","code":""},{"path":"https://docs.salmonmse.com/reference/CM2SOM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert conditioning model to operating model — CM2SOM","text":"SOM object.","code":""},{"path":"https://docs.salmonmse.com/reference/CM_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation function for conditioning model — CM_int","title":"Estimation function for conditioning model — CM_int","text":"Population dynamics model age structured salmon population. Used RTMB estimate historical reconstruction data.","code":""},{"path":"https://docs.salmonmse.com/reference/CM_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation function for conditioning model — CM_int","text":"","code":"CM_int(p, d)"},{"path":"https://docs.salmonmse.com/reference/CM_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation function for conditioning model — CM_int","text":"p List parameter variables. See fit_CM(). d List data variables. See fit_CM().","code":""},{"path":"https://docs.salmonmse.com/reference/CM_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation function for conditioning model — CM_int","text":"Numeric, objective function value (log-posterior)","code":""},{"path":"https://docs.salmonmse.com/reference/CM_int.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation function for conditioning model — CM_int","text":"Q. Huynh Stan code provided J. Korman C. Walters","code":""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls survival freshwater environment. Includes changes survival either environmental/climate effects habitat mitigation.","code":""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name use_habitat Logical. TRUE, utilize stage-specific density-dependent functions egg production incubation mortality, egg--fry production, fry--smolt production annual deviations. Otherwise, density-dependence modeled egg--smolt survival. See Bio object. egg_rel Character, density-dependent function egg production total spawning output. Choices \"BH\" (Beverton-Holt) \"HS\" (hockey stick). Default \"BH\". egg_prod Numeric, capacity egg production total spawning output (incubation). Default 1. Default Inf. egg_capacity Numeric, capacity egg production total spawning output (incubation). Set Inf density-independence. Default Inf. fry_rel Character, density-dependent function egg--fry production. Choices \"BH\" (Beverton-Holt) \"HS\" (hockey stick). Default \"BH\". fry_prod Numeric 0-1, productivity egg production total spawning output, .e., maximum survival egg production approaches zero. Default 0.4. fry_capacity Numeric, capacity fry production egg production. Set Inf density-independence. Default Inf. fry_sdev Matrix [nsim, proyears], deviations density-dependent egg-fry survival. Can utilized incorporate time-varying environmental, climate, habitat mitigation effects. Default matrix(1, nsim, proyears). smolt_rel Character, density-dependent function fry--smolt production. Choices \"BH\" (Beverton-Holt) \"HS\" (hockey stick). Default \"BH\". smolt_prod Numeric 0-1, productivity smolt production fry, .e., maximum survival fry production approaches zero. Default 1. smolt_capacity Numeric, capacity smolt production fry production. Set Inf density-independence. Default Inf. smolt_sdev Matrix [nsim, proyears], deviations density-dependent fry-smolt survival. Can utilized incorporate time-varying environmental, climate, habitat mitigation effects. Default matrix(1, nsim, proyears).","code":""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Habitat\")","code":""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Habitat\") #> Class \"Habitat\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                    #> Name:            Name    use_habitat        egg_rel       egg_prod #> Class:      character        logical      character        numeric #>                                                                    #> Name:    egg_capacity        fry_rel       fry_prod   fry_capacity #> Class:        numeric      character        numeric        numeric #>                                                                    #> Name:        fry_sdev      smolt_rel     smolt_prod smolt_capacity #> Class:         matrix        numeric        numeric        numeric #>                       #> Name:      smolt_sdev #> Class:         matrix #>  #> Extends: \"Habitat.list\""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls harvest.","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name u_preterminal Numeric. exploitation rate immature stock pre-terminal fishery. u_terminal Numeric. exploitation rate return terminal fishery. MSF Logical. Whether implement mark-selective fishing, retention unmarked fish. release_mort Vector length 2. proportion released fish die release, pre-terminal terminal fishery. Implemented model mark-selective fishing. used MSF = FALSE. vulPT Vector length maxage matrix [nsim, maxage]. Vulnerability schedule (0-1) preterminal fishery. vulT Vector length maxage matrix [nsim, maxage]. Vulnerability schedule (0-1) terminal fishery.","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Harvest\")","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Harvest\") #> Class \"Harvest\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                              #> Name:           Name u_preterminal    u_terminal           MSF  release_mort #> Class:     character       numeric       numeric       logical       numeric #>                                    #> Name:          vulPT          vulT #> Class:    num.matrix    num.matrix #>  #> Extends: \"Harvest.list\""},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":null,"dir":"Reference","previous_headings":"","what":"Harvest component of operating model — Harvest_MMP","title":"Harvest component of operating model — Harvest_MMP","text":"function used openMSE specify fishing effort projections. salmonMSE updates arguments function salmon operating model.","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harvest component of operating model — Harvest_MMP","text":"","code":"Harvest_MMP(   x = 1,   DataList,   reps = 1,   u_terminal,   u_preterminal,   MSF = FALSE,   m,   release_mort,   p_terminal = c(2, 5),   p_preterminal = c(1, 4),   pkey = data.frame(p = 1:6, s = 1),   p_natural = 1:3,   p_hatchery = 4:6,   ... )"},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harvest component of operating model — Harvest_MMP","text":"x Simulation number DataList nested list Data objects stock fleet, generated multiMSE() reps number stochastic replicates returned function u_terminal Numeric vector population (s). Harvest rate retained catch terminal fishery u_preterminal Single numeric. Harvest rate retained catch pre-terminal fishery MSF Logical, whether implement mark-selective fishing m Numeric vector population (s). Mark rate hatchery origin fish, proxy fishery retention. used calculate fishing effort. Retention operating model specified MOM object release_mort Matrix [2, s]. Release mortality discarded fish pre-terminal (1st row) terminal (2nd row) fishery. used MSF = TRUE. used calculate fishing effort. Release mortality operating model specified MOM object p_terminal Numeric vector. Population index (p) recruitment experiences terminal fishing mortality p_preterminal Numeric vector. Population index (p) immature fish experience pre-terminal fishing mortality pkey Data frame assigns openMSE population life stage origin (p) salmonMSE population (s) p_natural Numeric vector. Population index (p) natural origin fish p_hatchery Numeric vector. Population index (p) hatchery origin fish ... used","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harvest component of operating model — Harvest_MMP","text":"nested list Rec objects, dimension DataList","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls hatchery management.","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"Various parameters can stochastic (length nsim) input single numeric (value identical across simulations). description fitness parameters hatchery dynamics available online documentation.","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name n_r Integer. Number release strategies, sub-groups fish different survival schedules. Default one. n_yearling Vector length n_r. number yearlings released release strategy. hatchery modeled sum(n_yearling, n_subyearling) = 0. zero. Yearlings survival density-independent release. Default zero. n_subyearling Vector length n_r. number subyearlings released. hatchery modeled sum(n_yearling, n_subyearling) = 0 zero. Subyearlings experience density-dependent survival competition natural origin young. Default zero. s_prespawn Numeric. survival broodtake prior egg production. 1 - s_prespawn proportion fish used hatchery purposes, e.g., mortality resesarch purposes. Used back-calculate broodtake n_yearling n_subyearling. Default 1. s_egg_smolt Numeric. survival eggs smolt life stage (yearling release). Used back-calculate broodtake n_yearling n_subyearling. Default 1. s_egg_subyearling Numeric. survival eggs subyearling life stage (subyearling release). Used back-calculate broodtake n_yearling n_subyearling. Default 1. brood_import Matrix age (length maxage) number annual imported hatchery origin broodstock. Egg production weighted fec_brood. meet hatchery production target releases, imported brood local marked brood used indiscriminately. Default imported brood zero. Mjuv_HOS Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears, n_r]. Natural mortality immature hatchery origin fish. replicate SAR parameter stage-specific model, set Mjuv_HOS[] = -log(SAR) age class prior maturation (zero ages). p_mature_HOS Vector age (length maxage) array dimension [nsim, maxage, nyears+proyears, n_r] maturity hatchery spawners. Default set equal Bio@p_mature release strategies. stray_external Matrix age (length maxage) release strategy n_r denotes annual number hatchery origin strays populations/systems included operating model. Default zero. External strays added escapement life stage, assumed unmarked. multi-population models straying within system, see also SOM@stray matrix. gamma Numeric. relative reproductive success hatchery origin spawners (relative natural origin spawners). Default 1. m Numeric. mark rate hatchery origin fish, affects selective broodtake fishery retention mark-selective fishing utilized. Set m = 1 AHA compatibility ptarget_NOB. Default zero. pmax_esc Numeric. maximum proportion total escapement (en route mortality) used broodtake. Set 1 AHA compatibility. Default 0.75. pmax_NOB Numeric. maximum proportion natural origin escapement (en route mortality pmax_esc) used broodtake. broodstock limited pmax_esc < 1, parameter 1. Default 1. ptarget_NOB Numeric. target proportion natural origin broodtake relative overall broodtake, assuming mark rate 1 natural origin fish can identified hatchery. realized proportion may lower insufficient natural origin escapement. mark rate < 1, target proportion identifies proportion unmarked fished broodtake. mark rate = 0, pNOB equal proportion escapement. Default 0.9. phatchery Numeric. proportion hatchery origin escapement return hatchery, example, removal spawning grounds swim-facilities. fish available broodtake. product phatchery premove_HOS spawn natural environment. Default 0.8. premove_HOS Numeric. target proportion hatchery origin escapement removed spawning grounds (order ensure high proportion NOS). effective removal discounted mark rate, .e., premove_HOS * m. removed hatchery origin fish spawn available broodtake. value less one can represent imperfect implementation weir removal. product phatchery premove_HOS * m spawn natural environment. Default zero. fec_brood Vector length maxage. fecundity schedule broodtake calculate total egg production hatchery. missing, uses Bio@fec. fitness_type Character vector length 2. fitness function apply natural hatchery environment, respectively. , either \"Ford\" \"none\". theta Vector length 2. optimum phenotype value natural hatchery environments. rel_loss Vector length 3. loss fitness apportioned among egg, fry, smolt life stages reduces survival. Theoretically, three values sum 1. Alternatively, set zero set fitness loss zero specific life stage (survival one). zbar_start Vector length 2. mean phenotype value natural hatchery populations start projection. Alternatively, array dimension [nsim, maxage, 2], age slot corresponds cohort. fitness_variance Numeric. variance phenotypic trait. Assumed identical natural hatchery environments. selection_strength Numeric. ratio fitness standard deviation phenotype standard deviation. heritability Numeric. heritability phenotypic trait. 0-1. fitness_floor Numeric. minimum fitness value natural hatchery environments, .e., fitness drop threshold. Default 0.5.","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Hatchery\")","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Hatchery\") #> Class \"Hatchery\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                 #> Name:                Name                n_r         n_yearling #> Class:          character            numeric            numeric #>                                                                 #> Name:       n_subyearling         s_prespawn        s_egg_smolt #> Class:            numeric            numeric            numeric #>                                                                 #> Name:   s_egg_subyearling       brood_import           Mjuv_HOS #> Class:            numeric            numeric          num.array #>                                                                 #> Name:        p_mature_HOS     stray_external              gamma #> Class:          num.array             matrix            numeric #>                                                                 #> Name:                   m           pmax_esc           pmax_NOB #> Class:            numeric            numeric            numeric #>                                                                 #> Name:         ptarget_NOB          phatchery        premove_HOS #> Class:            numeric            numeric            numeric #>                                                                 #> Name:           fec_brood       fitness_type              theta #> Class:            numeric          character            numeric #>                                                                 #> Name:            rel_loss         zbar_start   fitness_variance #> Class:            numeric          num.array            numeric #>                                                                 #> Name:  selection_strength       heritability      fitness_floor #> Class:            numeric            numeric            numeric #>  #> Extends: \"Hatchery.list\""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model specifies historical dynamics.","code":""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name HistSpawner_NOS Array [nsim, maxage, nyears, n_g]. Natural origin spawners age natural environment. Optional HistSpawner_HOS Array [nsim, maxage, nyears, n_r]. Hatchery origin spawners age natural environment. Optional HistNjuv_NOS Array [nsim, maxage, nyears+1, n_g]. abundance immature natural origin fish beginning annual time step. Default assumes 1000 smolts (age-1) fish annually. HistNjuv_HOS Array [nsim, maxage, nyears+1, n_r]. abundance immature hatchery origin fish beginning annual time step. Default assumes 1000 smolts (age-1) fish annually. HistFPT Vector historical years (nyears) array dimension [nsim, nyears, 2]. instantaneous fishing mortality preterminal fishery. first array slice corresponds F natural origin fish second array slice corresponds hatchery origin fish. Default zero. HistFT Vector historical years (nyears) array dimension [nsim, nyears, 2]. instantaneous fishing mortality terminal fishery. first array slice corresponds F natural origin fish second array slice corresponds hatchery origin fish. Default zero.","code":""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Historical\")","code":""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Historical\") #> Class \"Historical\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                        #> Name:             Name HistSpawner_NOS HistSpawner_HOS    HistNjuv_NOS #> Class:       character           array           array           array #>                                                        #> Name:     HistNjuv_HOS         HistFPT          HistFT #> Class:           array       num.array       num.array #>  #> Extends: \"Historical.list\""},{"path":"https://docs.salmonmse.com/reference/PNI50.html","id":null,"dir":"Reference","previous_headings":"","what":"Example performance metrics — PNI50","title":"Example performance metrics — PNI50","text":"Functions evaluate return probabilities outcomes simulations.","code":""},{"path":"https://docs.salmonmse.com/reference/PNI50.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example performance metrics — PNI50","text":"","code":"PNI50(SMSE, Ref = 0.5, Yrs = NULL)  PNI80(SMSE, Ref = 0.8, Yrs = NULL)  WILD50(SMSE, Ref = 0.5, Yrs = NULL)  SMSY85(SMSE, Ref = 0.85, Yrs = NULL)  Sgen100(SMSE, Ref = 1, Yrs = NULL)"},{"path":"https://docs.salmonmse.com/reference/PNI50.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example performance metrics — PNI50","text":"SMSE SMSE object returned salmonMSE() Ref Threshold performance metric, used calculate probability metric exceeds value Yrs Numeric vector length 2 indicate year range summarize performance. NULL, performance summarized projection years.","code":""},{"path":"https://docs.salmonmse.com/reference/PNI50.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example performance metrics — PNI50","text":"vector probabilities corresponding population","code":""},{"path":"https://docs.salmonmse.com/reference/PNI50.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example performance metrics — PNI50","text":"PNI50 calculates probability PNI exceeds 0.50 (threshold integrated-transition population, Withler et al. 2018) PNI80 calculates probability PNI exceeds 0.80 (threshold integrated-wild population, Withler et al. 2018) WILD50 calculates probability least 50 percent natural spawners wild SMSY85 calculates probability NOS/SMSY exceeds 0.85 Sgen100 calculates probability NOS/Sgen exceeds 1","code":""},{"path":"https://docs.salmonmse.com/reference/PNI50.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example performance metrics — PNI50","text":"Withler et al. 2018. Genetically Based Targets Enhanced Contributions Canadian Pacific Chinook Salmon Populations. DFO Can. Sci. Advis. Sec. Res. Doc. 2018/019. xii + 88 p.","code":""},{"path":"https://docs.salmonmse.com/reference/SAR_fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Update natural mortality of juveniles — SAR_fitness","title":"Update natural mortality of juveniles — SAR_fitness","text":"Internal function updates juvenile natural mortality marine environement due fitness SAR_fitness() calculates new natural mortality value makeRel_SAR generates list openMSE use simulations","code":""},{"path":"https://docs.salmonmse.com/reference/SAR_fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update natural mortality of juveniles — SAR_fitness","text":"","code":"SAR_fitness(   x = -1,   y = 1,   envir = c(\"natural\", \"hatchery\"),   rel_loss = 1,   s = 1,   nyears,   Mbase )  makeRel_SAR(   p_smolt = 1,   s = 1,   envir = c(\"natural\", \"hatchery\"),   rel_loss,   nyears,   Mbase )"},{"path":"https://docs.salmonmse.com/reference/SAR_fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update natural mortality of juveniles — SAR_fitness","text":"x Integer, simulation number openMSE y Integer, simulation year (including historical years) envir Character, whether obtain fitness value natural hatchery environment. rel_loss Numeric, loss exponent juveniles s Integer, salmonMSE population index. Used search fitness value nyears Integer, number historical years operating model Mbase Array [nsim, n_age, proyears] base natural mortality value openMSE operating model. p_smolt Integer, population index juvenile population openMSE model","code":""},{"path":"https://docs.salmonmse.com/reference/SAR_fitness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update natural mortality of juveniles — SAR_fitness","text":"smolt_func() returns numeric ratio realized smolt production vs. hypothetical value hatchery, en route mortality, habitat improvement makeRel_smolt returns list passed openMSE inter-population relationship","code":""},{"path":"https://docs.salmonmse.com/reference/SHist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Stores outputs historical reconstruction salmon operating models.","code":""},{"path":"https://docs.salmonmse.com/reference/SHist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name nyears Integer. number historical years nsim Integer. number simulations nstocks Integer. number stocks Snames Character. Stock names Egg_NOS Array [nsim, nstocks, nyears]. Spawning output, .e., egg production, natural origin spawners. Egg_HOS Array [nsim, nstocks, nyears]. Spawning output hatchery origin spawners. Smolt Array [nsim, nstocks, nyears]. Natural smolt production (sum offspring natural hatchery spawners). Smolt_Rel Array [nsim, nstocks, proyears]. Smolts offspring broodtake, .e., hatchery releases. Njuv_NOS Array [nsim, nstocks, nage, nyears]. Abundance juvenile natural origin fish beginning year. Njuv_HOS Array [nsim, nstocks, nage, nyears]. Abundance juvenile hatchery origin fish beginning year. Return_NOS Array [nsim, nstocks, nage, nyears]. Mature fish natural origin spawners. Return_HOS Array [nsim, nstocks, nage, nyears]. Mature fish hatchery origin spawners. Escapement_NOS Array [nsim, nstocks, nage, nyears]. escapement mature fish natural origin spawners. Escapement_HOS Array [nsim, nstocks, nage, nyears]. escapement mature fish hatchery origin spawners. NOS Array [nsim, nstocks, proyears]. Natural origin spawners. HOS Array [nsim, nstocks, proyears]. Hatchery origin spawners. HOS_effective Array [nsim, nstocks, proyears]. Hatchery origin spawners discounted gamma. KPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery kept catch natural origin spawners. KT_NOS Array [nsim, nstocks, proyears]. Terminal fishery kept catch natural origin spawners. KPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery kept catch hatchery origin spawners. KT_HOS Array [nsim, nstocks, proyears]. Terminal fishery kept catch hatchery origin spawners. DPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery released catch (live dead) natural origin spawners. DT_NOS Array [nsim, nstocks, proyears]. Terminal fishery released catch (live dead) natural origin spawners. DPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery released catch (live dead) hatchery origin spawners. DT_HOS Array [nsim, nstocks, proyears]. Terminal fishery released catch (live dead) hatchery origin spawners. UPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery harvest rate (kept catch) natural origin spawners. UT_NOS Array [nsim, nstocks, proyears]. Terminal fishery harvest rate natural origin spawners. UPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery harvest rate hatchery origin spawners. UT_HOS Array [nsim, nstocks, proyears]. Terminal fishery harvest rate hatchery origin spawners. ExPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery exploitation rate (kept catch dead releases) natural origin spawners. ExT_NOS Array [nsim, nstocks, proyears]. Terminal fishery exploitation rate natural origin spawners. ExPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery exploitation rate hatchery origin spawners. ExT_HOS Array [nsim, nstocks, proyears]. Terminal fishery exploitation rate hatchery origin spawners. Misc List. Miscellaneous output","code":""},{"path":"https://docs.salmonmse.com/reference/SHist-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"SHist\") #> Class \"SHist\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                    #> Name:            Name         nyears           nsim        nstocks #> Class:      character        numeric        numeric        numeric #>                                                                    #> Name:          Snames        Egg_NOS        Egg_HOS          Smolt #> Class:      character          array          array          array #>                                                                    #> Name:       Smolt_Rel       Njuv_NOS       Njuv_HOS     Return_NOS #> Class:          array          array          array          array #>                                                                    #> Name:      Return_HOS Escapement_NOS Escapement_HOS            NOS #> Class:          array          array          array          array #>                                                                    #> Name:             HOS  HOS_effective        KPT_NOS         KT_NOS #> Class:          array          array          array          array #>                                                                    #> Name:         KPT_HOS         KT_HOS        DPT_NOS         DT_NOS #> Class:          array          array          array          array #>                                                                    #> Name:         DPT_HOS         DT_HOS        UPT_NOS         UT_NOS #> Class:          array          array          array          array #>                                                                    #> Name:         UPT_HOS         UT_HOS       ExPT_NOS        ExT_NOS #> Class:          array          array          array          array #>                                                     #> Name:        ExPT_HOS        ExT_HOS           Misc #> Class:          array          array           list"},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Stores outputs simulation salmon operating models.","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"generation \\(t\\), proportionate natural influence (PNI) defined : $$\\textrm{PNI}_t = \\dfrac{p^\\textrm{NOB}_t}{p^\\textrm{NOB}_t + p^\\textrm{HOSeff}_t}$$ \\(p^\\textrm{HOSeff} = \\textrm{HOSeff}/(\\textrm{NOS} + \\textrm{HOSeff})\\). proportion wild salmon defined : $$p^{\\textrm{WILD}}_t = q^\\textrm{HOScen}_t \\dfrac{(q^\\textrm{HOScen}_{t-1})^2} {(q^\\textrm{HOScen}_{t-1})^2 + 2\\gamma \\times p^\\textrm{HOScen}_{t-1} q^\\textrm{HOScen}_{t-1} + \\gamma^2 (p^\\textrm{HOScen}_{t-1})^2}$$ \\(q = 1-p\\) \\(p^\\textrm{HOScen} = \\textrm{HOS}/(\\textrm{NOS} + \\textrm{HOS})\\).","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name nyears Integer. number historical years proyears Integer. number projected years nsim Integer. number simulations nstocks Integer. number stocks Snames Character. Stock names Egg_NOS Array [nsim, nstocks, proyears]. Spawning output, .e., egg production, natural origin spawners. Egg_HOS Array [nsim, nstocks, proyears]. Spawning output hatchery origin spawners. Fry_NOS Array [nsim, nstocks, proyears]. Fry offspring natural origin spawners. Fry_HOS Array [nsim, nstocks, proyears]. Fry offspring hatchery origin spawners. Smolt_NOS Array [nsim, nstocks, proyears]. Smolts offspring natural origin spawners. Smolt_HOS Array [nsim, nstocks, proyears]. Smolts offspring hatchery origin spawners. Smolt_Rel Array [nsim, nstocks, proyears]. Smolts offspring broodtake, .e., hatchery releases. Njuv_NOS Array [nsim, nstocks, nage, proyears]. Abundance juvenile natural origin fish beginning year. Njuv_HOS Array [nsim, nstocks, nage, proyears]. Abundance juvenile hatchery origin fish beginning year. Return_NOS Array [nsim, nstocks, nage, proyears]. Mature fish natural origin spawners. Return_HOS Array [nsim, nstocks, nage, proyears]. Mature fish hatchery origin spawners. Escapement_NOS Array [nsim, nstocks, nage, proyears]. escapement mature fish natural origin spawners. Escapement_HOS Array [nsim, nstocks, nage, proyears]. escapement mature fish hatchery origin spawners. NOB Array [nsim, nstocks, proyears]. Natural origin broodtake. HOB Array [nsim, nstocks, proyears]. Local hatchery origin broodtake. HOB_import Array [nsim, nstocks, proyears]. Imported hatchery origin broodtake used hatchery production. NOS Array [nsim, nstocks, proyears]. Natural origin spawners. HOS Array [nsim, nstocks, proyears]. Hatchery origin spawners. HOS_effective Array [nsim, nstocks, proyears]. Hatchery origin spawners discounted gamma. KPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery kept catch natural origin spawners. KT_NOS Array [nsim, nstocks, proyears]. Terminal fishery kept catch natural origin spawners. KPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery kept catch hatchery origin spawners. KT_HOS Array [nsim, nstocks, proyears]. Terminal fishery kept catch hatchery origin spawners. DPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery released catch (live dead) natural origin spawners. DT_NOS Array [nsim, nstocks, proyears]. Terminal fishery released catch (live dead) natural origin spawners. DPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery released catch (live dead) hatchery origin spawners. DT_HOS Array [nsim, nstocks, proyears]. Terminal fishery released catch (live dead) hatchery origin spawners. UPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery harvest rate (kept catch) natural origin spawners. UT_NOS Array [nsim, nstocks, proyears]. Terminal fishery harvest rate natural origin spawners. UPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery harvest rate hatchery origin spawners. UT_HOS Array [nsim, nstocks, proyears]. Terminal fishery harvest rate hatchery origin spawners. ExPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery exploitation rate (kept catch dead releases) natural origin spawners. ExT_NOS Array [nsim, nstocks, proyears]. Terminal fishery exploitation rate natural origin spawners. ExPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery exploitation rate hatchery origin spawners. ExT_HOS Array [nsim, nstocks, proyears]. Terminal fishery exploitation rate hatchery origin spawners. fitness Array [nsim, nstocks, 2, proyears]. Fitness population natural (1) hatchery (2) environments. pNOB Array [nsim, nstocks, proyears]. Proportion natural fish brood. pHOS_census Array [nsim, nstocks, proyears]. Proportion spawners hatchery origin, weighted age class fecundity. pHOS_effective Array [nsim, nstocks, proyears]. Proportion spawners hatchery origin, discounted gamma, weighted age class fecundity. PNI Array [nsim, nstocks, proyears]. Proportionate natural influence, index gene flow hatchery natural environment. p_wild Array [nsim, nstocks, proyears]. Proportion wild spawners, natural spawners whose parents also produced natural environment assuming non-assortative mating, defined Canada's Wild Salmon Policy. Mjuv_loss Array [nsim, nstocks, nage, proyears]. Realized juvenile natural mortality, may differ inputs due fitness loss. Misc List. Miscellaneous output: Ref reference points SHist SHist object SOM SOM object. LHG list nstocks long containing state variables life history group","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"SMSE\")","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Withler et al. 2018. Genetically Based Targets Enhanced Contributions Canadian Pacific Chinook Salmon Populations. DFO Can. Sci. Advis. Sec. Res. Doc. 2018/019. xii + 88 p.","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"SMSE\") #> Class \"SMSE\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                    #> Name:            Name         nyears       proyears           nsim #> Class:      character        numeric        numeric        numeric #>                                                                    #> Name:         nstocks         Snames        Egg_NOS        Egg_HOS #> Class:        numeric      character          array          array #>                                                                    #> Name:         Fry_NOS        Fry_HOS      Smolt_NOS      Smolt_HOS #> Class:          array          array          array          array #>                                                                    #> Name:       Smolt_Rel       Njuv_NOS       Njuv_HOS     Return_NOS #> Class:          array          array          array          array #>                                                                    #> Name:      Return_HOS Escapement_NOS Escapement_HOS            NOB #> Class:          array          array          array          array #>                                                                    #> Name:             HOB     HOB_import            NOS            HOS #> Class:          array          array          array          array #>                                                                    #> Name:   HOS_effective        KPT_NOS         KT_NOS        KPT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:          KT_HOS        DPT_NOS         DT_NOS        DPT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:          DT_HOS        UPT_NOS         UT_NOS        UPT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:          UT_HOS       ExPT_NOS        ExT_NOS       ExPT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:         ExT_HOS        fitness           pNOB    pHOS_census #> Class:          array          array          array          array #>                                                                    #> Name:  pHOS_effective      Mjuv_loss            PNI         p_wild #> Class:          array          array          array          array #>                       #> Name:            Misc #> Class:           list"},{"path":"https://docs.salmonmse.com/reference/SOM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"object containing parameters salmon operating model (SOM).","code":""},{"path":"https://docs.salmonmse.com/reference/SOM-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name nsim Integer. Number simulations nyears Integer. number historical years proyears Integer. number projected years seed Integer. random seed ensure users can reproduce results exactly Bio Bio object informing biological parameters, natural production, habitat effects. Provide list Bio objects multi-population models. Habitat Habitat object containing management levers habitat mitigation. Provide list Habitat objects multi-population models. Hatchery Hatchery object containing management levers hatchery production. Provide list Hatchery objects multi-population models. Harvest Harvest object containing management levers harvest. Provide list Harvest objects multi-population models. Historical Historical object inform historical reconstruction informing starting abundance projection. Provide list Historical objects multi-population models. stray Matrix [np, np] np = length(Bio) row p indicates re-assignment hatchery fish population mature (recruitment life stage). example, SOM@stray <- matrix(c(0.75, 0.25, 0.25, 0.75), 2, 2) indicates 75 percent mature fish return natal river 25 percent stray populations. default, identity matrix used (straying).","code":""},{"path":"https://docs.salmonmse.com/reference/SOM-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"SOM\", Bio, Habitat, Hatchery, Harvest, Historical).","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate abundance from density-dependent mortality — calc_SRR","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"Calculates abundance survivors applying either Beverton-Holt Ricker stock-recruit relationship.","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"","code":"calc_SRR(N1, N2 = N1, p, capacity, type = c(\"BH\", \"Ricker\", \"HS\"))"},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"N1 Numeric, initial abundance scales density-independent survival term N2 Numeric, initial abundance scales density-dependent survival term p Numeric, productivity parameter sets maximum survival initial abundance approaches zero capacity Numeric, capacity parameter set maximum survivors type Character, functional form stock-recruit relationship","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"calc_SRR calculates abundance survivors calc_SRRpars calculates alpha beta terms productivity parameter terms abundance N1 N2 terms ","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"Beverton-Holt stock recruit relationship following form: $$\\textrm{Smolt} = \\dfrac{\\alpha N_1}{1 + \\beta N_2}$$ \\(\\alpha = P\\), \\(\\beta = P/C\\). Ricker stock recruit relationship following form: $$\\textrm{Smolt} = \\alpha N_1 \\exp(-\\beta N_2)$$ \\(\\alpha = P\\), \\(\\beta = P/(Ce)\\), \\(e\\) Euler's number. Productivity \\(P\\) terms abundance per unit \\(N_1\\) \\(N_2\\). hockey stick following form: $$\\textrm{Smolt} = \\begin{cases}p N_1 &, N_1 \\le \\frac{N_1}{N_2}C\\\\ \\frac{N_1}{N_2}C &, N_1 \\gt \\frac{N_1}{N_2}C\\end{cases}$$","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert density-dependent survival parameters — calc_SRRpars","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"Converts capacity/productivity parameters alpha/beta stock-recruit parameters productivity terms smolts per spawner alpha terms smolts per egg.","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"","code":"calc_SRRpars(p, capacity, f = 1, p_female = 1, type = c(\"BH\", \"Ricker\", \"HS\"))"},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"p Numeric, productivity parameter sets maximum survival initial abundance approaches zero capacity Numeric, capacity parameter set maximum survivors f Fecundity, spawning output per mature female p_female proportion females per spawner type Character, functional form stock-recruit relationship","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"vector alpha beta value, respectively","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"$$\\alpha = \\dfrac{P}{f \\times p_{female}}$$ Beverton-Holt stock recruit relationship: $$\\beta = \\dfrac{\\alpha}{C}$$ Ricker stock recruit relationship: $$\\beta = \\dfrac{\\alpha}{Ce}$$, \\(e\\) Euler's number.","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/calc_phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate unfished egg per smolt with life history groups — calc_phi","title":"Calculate unfished egg per smolt with life history groups — calc_phi","text":"Calculate unfished egg per smolt life history groups","code":""},{"path":"https://docs.salmonmse.com/reference/calc_phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate unfished egg per smolt with life history groups — calc_phi","text":"","code":"calc_phi(Mjuv, p_mature, p_female, fec, s_enroute = 1, n_g = 1, p_LHG)"},{"path":"https://docs.salmonmse.com/reference/calc_phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate unfished egg per smolt with life history groups — calc_phi","text":"Mjuv Matrix [maxage, n_g], can vector n_g = 1. Juvenile natural mortality p_mature Matrix [maxage, n_g], can vector n_g = 1. Maturity age p_female Numeric. Proportion female fec Matrix [maxage, n_g], can vector n_g = 1. Fecundity age s_enroute Numeric, en-route survival escapement spawning grounds n_g Integer. Number life history groups p_LHG Vector length n_g proportion life history groups per recruit. Default rep(1/n_g, n_g)","code":""},{"path":"https://docs.salmonmse.com/reference/calc_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference points — calc_ref","title":"Reference points — calc_ref","text":"Calculate MSY Sgen reference points operating model. Uses biological parameters (maturity, natural mortality) last year projection.","code":""},{"path":"https://docs.salmonmse.com/reference/calc_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference points — calc_ref","text":"","code":"calc_ref(SOM, rel_F, check = TRUE)"},{"path":"https://docs.salmonmse.com/reference/calc_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference points — calc_ref","text":"SOM object class SOM rel_F Numeric length 2, indicates relative effort preterminal terminal fisheries, maximum value 1. example, c(1, 0) indicates yield calculation preterminal fishery. default, uses ratio harvest rates operating model. check Logical, whether check SOM object using check_SOM()","code":""},{"path":"https://docs.salmonmse.com/reference/calc_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference points — calc_ref","text":"Matrix various state variables (catch, exploitation rate, egg production, spawners) MSY Sgen simulation","code":""},{"path":"https://docs.salmonmse.com/reference/calc_smolt.html","id":null,"dir":"Reference","previous_headings":"","what":"Smolt production — calc_smolt","title":"Smolt production — calc_smolt","text":"Calculate smolt production base stock-recruit parameters fitness loss","code":""},{"path":"https://docs.salmonmse.com/reference/calc_smolt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smolt production — calc_smolt","text":"","code":"calc_smolt(   N1,   N2 = N1,   kappa,   capacity,   Smax,   phi = 1,   fitness_loss = 1,   SRrel = c(\"BH\", \"Ricker\"),   per_recruit = FALSE )"},{"path":"https://docs.salmonmse.com/reference/calc_smolt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smolt production — calc_smolt","text":"N1 Egg production density-independent component stock-recruit relationship. Can number spawners phi = 1 Smax units spawners. N2 Egg production density-dependent component stock-recruit relationship (used per_recruit = FALSE) kappa Base productivity parameter capacity Base capacity parameter SRrel = \"BH\" Smax Base Smax parameter SRrel = \"Ricker\" phi Unfished egg per smolt (1/phi replacement line) fitness_loss Survival term reduce smolt production due fitness, 0-1 SRrel Character stock-recruit function per_recruit Logical, whether N1 per recruit quantity (TRUE) absolute numbers (FALSE)","code":""},{"path":"https://docs.salmonmse.com/reference/calc_smolt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smolt production — calc_smolt","text":"Numeric","code":""},{"path":"https://docs.salmonmse.com/reference/check_SOM.html","id":null,"dir":"Reference","previous_headings":"","what":"Check inputs to SOM object — check_SOM","title":"Check inputs to SOM object — check_SOM","text":"Ensures slots SOM object correct dimensions. Function update slots full dimensions.","code":""},{"path":"https://docs.salmonmse.com/reference/check_SOM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check inputs to SOM object — check_SOM","text":"","code":"check_SOM(SOM, silent = FALSE)"},{"path":"https://docs.salmonmse.com/reference/check_SOM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check inputs to SOM object — check_SOM","text":"SOM SOM object silent Logical, whether report progress console","code":""},{"path":"https://docs.salmonmse.com/reference/check_SOM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check inputs to SOM object — check_SOM","text":"Updated SOM object full dimensions various slots","code":""},{"path":"https://docs.salmonmse.com/reference/compare_spawners.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare simulation runs — compare_spawners","title":"Compare simulation runs — compare_spawners","text":"Create figures compare results across two dimensions","code":""},{"path":"https://docs.salmonmse.com/reference/compare_spawners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare simulation runs — compare_spawners","text":"","code":"compare_spawners(SMSE_list, Design, prop = FALSE, FUN = median)  compare_fitness(SMSE_list, Design, FUN = median)  compare_escapement(SMSE_list, Design, FUN = median)"},{"path":"https://docs.salmonmse.com/reference/compare_spawners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare simulation runs — compare_spawners","text":"SMSE_list list SMSE objects returned salmonMSE() Design data frame two columns describes factorial design simulations. Used label figure. Rows correspond object SMSE_list. two columns variables plot result. See example https://docs.salmonmse.com/articles/decision-table.html. prop Logical, whether plot absolute numbers proportions FUN Summarizing function across simulations, typically stats::median() base::mean()","code":""},{"path":"https://docs.salmonmse.com/reference/compare_spawners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare simulation runs — compare_spawners","text":"ggplot object","code":""},{"path":"https://docs.salmonmse.com/reference/compare_spawners.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare simulation runs — compare_spawners","text":"compare_spawners() generates time series composition spawners compare_fitness() generates time series metrics (fitness, PNI, pHOS, pWILD) related hatchery production compare_escapement() generates time series proportion spawners broodtake escapement","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit conditioning model to historical data — fit_CM","title":"Fit conditioning model to historical data — fit_CM","text":"Bayesian stock reconstruction model natural hatchery origin fish, fitted coded wire tag data, observed escapement, hatchery releases (Korman Walters 2024). Estimates time-varying maturity rate well time-varying ocean survival linear model covariates (separate covariates assumed age 1 vs. ages 2+). model includes either preterminal fishery, terminal fishery, (see Data start sections documentation). fit_CM() generates RTMB model data can passed sample_CM() run MCMC Stan.","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit conditioning model to historical data — fit_CM","text":"","code":"fit_CM(   data,   start = list(),   map = list(),   lower = list(),   upper = list(),   do_fit = TRUE,   silent = TRUE,   control = list(eval.max = 1e+05, iter.max = 1e+05),   ... )  sample_CM(fit, ...)"},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit conditioning model to historical data — fit_CM","text":"data list containing data inputs. See details. start optional list containing parameter starting values. See details. map optional list describes parameters fixed model. See TMB::MakeADFun(). lower Named list containing lower bounds parameters. See details. upper Named list containing upper bounds parameters. See details. do_fit Logical, whether fit estimate Hessian. silent Logical, whether silence output RTMB console. control List, control argument pass stats::nlminb(). ... fit_CM, arguments RTMB::MakeADFun(). sample_CM, arguments rstan::sampling() fit List output fit_CM()","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit conditioning model to historical data — fit_CM","text":"fit_CM() returns named list containing RTMB model (obj), nlminb output (opt), standard errors (SD), parameter bounds (lower upper) sample_CM() returns stanfit object containing MCMC chains","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"data","dir":"Reference","previous_headings":"","what":"Data","title":"Fit conditioning model to historical data — fit_CM","text":"Data passed named list following: Nages Integer, number age classes model Ldyr Integer, number years model lht Integer, life history type. 1 now hatchsurv Numeric, survival hatchery releases smolt life stage. Density-independent. gamma Optional. Numeric, relative spawning success hatchery origin spawners. Default 1. ssum Numeric, proportion spawners female finitPT Numeric, initial preterminal fishing mortality calculating equilibrium spawners age first year model. Default 0. finitT Numeric, initial terminal fishing mortality calculating equilibrium spawners age first year model. Default 0. bmatt Vector length Nages. Proportion maturity age, base values calculating unfished replacement line. Also prior means year-specific maturity rates estimated. fec Vector length Nages. Fecundity, egg production age bvulPT Vector length Nages. Prior mean vulnerability age preterminal fishery. bvulT Vector length Nages. Prior mean vulnerability age terminal fishery. mobase. Vector length Nages. Natural mortality age, base values calculating unfished replacement line equilibrium spawners age. cwtrelease Vector length Ldyr, coded wire tag (CWT) releases cwtesc Matrix [Ldyr, Nages]. CWT escapement brood year age. Poisson likelhood. cwtcatPT Matrix [Ldyr, Nages]. CWT preterminal catch, brood year age. Poisson likelhood. Set values zero turn parameters related preterminal fishery. cwtcatT Matrix [Ldyr, Nages]. CWT terminal catch, brood year age. Poisson likelhood. Set values zero turn parameters related terminal fishery. RelRegFPT Vector Ldyr. Trend relative regional preterminal fishing mortality. Fishing mortality estimated estimating scaling coefficient annual deviations vector. RelRegFT Vector Ldyr. Trend relative regional terminal fishing mortality. obsescape Vector length Ldyr, total observed escapement (ages hatchery/natural fish). Lognormal likelhood. propwildspawn Vector length Ldyr, proportion escapement spawn (accounts en-route mortality broodtake) hatchrelease Vector length Ldyr+1, number hatchery juvenile fish released cwtExp Numeric, CWT sampling rate. coefficient scales CWT predictions match observations. example, cwtExp = 0.1 reduces CWT predictions 0.1 likelihood. Default 1. Poisson distribution used likelihood CWT observations, parameter can used downweight CWT likelihood relative escapement time series. covariate1 Optional. Matrix Ldyr, ncov1 linear covariates predict natural mortality age 1. covariate Optional. Matrix Ldyr, ncov linear covariates predict natural mortality ages 2+. s_enroute Numeric, survival escapement spawning grounds. Default 1. so_mu Numeric, prior mean unfished spawners logspace. Default log(3 * max(data$obsescape)). so_sd Numeric, prior standard deviation unfished spawners logspace. Default 0.5. fitness Logical, whether calculate fitness effects survival. Default FALSE. theta Vector length 2, optimum phenotype value natural hatchery environments. Default 100 80, respectively. See online article information. rel_loss Vector length 3, loss fitness apportioned egg, fry (prior density-dependence), smolt (density-dependence) life stage. three values sum 1. zbar_start Vector length 2, mean phenotype spawners broodtake natural hatchery environment, respectively, start model. Default values 100 100, implying maximum fitness natural environment start model. fitness_variance Numeric. variance phenotypic trait. Assumed identical natural hatchery environments. Default 10. selection_strength Numeric. ratio fitness standard deviation phenotype standard deviation. Default 3. heritability Numeric. heritability phenotypic trait. 0-1. Default 0.5. fitness_floor Numeric. minimum fitness value natural hatchery environments. Default 0.5.","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"start","dir":"Reference","previous_headings":"","what":"start","title":"Fit conditioning model to historical data — fit_CM","text":"Starting values parameters can provided named list: log_cr Numeric, log compensation ratio (productivity). Default 3. log_so Numeric, unfished spawners logspace. Default log(3 * max(data$obsescape)). moadd Numeric, additive term base natural mortality rate age 1 juveniles. Default zero. wt Vector Ldyr. Annual deviates natural mortality freshwater life stage (affects egg smolt survival). Estimated normal prior mean zero standard deviation p$wt_sd. Default zero. wto Vector Ldyr. Annual deviates natural mortality age 1 juveniles (marine life stage). Estimated normal prior mean zero standard deviation p$wto_sd. Default zero. log_FbasePT Numeric, scaling coefficient estimate preterminal fishing mortality data$RelRegFPT. Default log(0.1). log_FbaseT Numeric, scaling coefficient estimate preterminal fishing mortality data$RelRegFT. Default log(0.1). log_fanomalyPT Vector Ldyr. Annual lognormal deviates exp(log_FbasePT) * data$RelRegFPT estimate preterminal fishing mortality. Estimated normal prior mean zero standard deviation p$fanomaly_sd. Default zero. log_fanomalyT Vector Ldyr. Annual lognormal deviates exp(log_FbaseT) * data$RelRegFT estimate terminal fishing mortality. Estimated normal prior mean zero standard deviation p$fanomalyPT_sd. Default zero. lnE_sd Numeric, lognormal standard deviation observed escapement. Estimated hierarchical gamma(2, 5) prior. Default 0.1. wt_sd Numeric, lognormal standard deviation egg smolt (freshwater) natural mortality deviates. Estimated hierarchical gamma(2, 5) prior. Default 1. wto_sd Numeric, lognormal standard deviation age 1 (marine) natural mortality deviates. Estimated hierarchical gamma(2, 5) prior. Default 1. fanomalyPT_sd Numeric, lognormal standard deviation fanomalyPT. Estimated hierarchical gamma(2, 5) prior. Default 1. fanomalyT_sd Numeric, lognormal standard deviation fanomalyT. Estimated hierarchical gamma(2, 5) prior. Default 1. logit_vulPT Vector Nages-2 preterminal vulnerability age logit space. Fixed zero one age 1 maximum age, respectively. Default qlogis(data$bvul_PT[-c(1, data$Nages)]). logit_vulT Vector Nages-2 terminal vulnerability age logit space. Fixed zero one age 1 maximum age, respectively. Default qlogis(data$bvul_T[-c(1, data$Nages)]). logit_matt Matrix Ldyr, Nages-2 maturity year age logit space. Maturity fixed zero one age 1 maximum age, respectively. Default matrix(qlogis(data$bmatt[-c(1, data$Nages)]), data$Ldyr, data$Nages-2, byrow = TRUE). sd_matt Vector Nages-2. Logit standard deviation maturity (logit_matt) age class. Default 0.5. b1 Vector ncov1 coefficients linear covariates predict natural mortality age 1. Default zero. b Vector ncov coefficients linear covariates predict natural mortality ages 2+. Default zero.","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"bounds","dir":"Reference","previous_headings":"","what":"Bounds","title":"Fit conditioning model to historical data — fit_CM","text":"default, standard deviation parameters parameters normal space (e.g., FbasePT, Fbase_T) lower bound zero. moadd lower bound zero default, feasible parameter can negative well. Deviation parameters centred around zero bounded -3 3. log_cr parameter lower bound zero. parameters unbounded.","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"covariates-on-natural-mortality","dir":"Reference","previous_headings":"","what":"Covariates on natural mortality","title":"Fit conditioning model to historical data — fit_CM","text":"Natural mortality modeled sum base value \\(M^\\textrm{base}\\), additional scaling factor age 1 \\(M^\\textrm{add}\\), linear system covariates \\(X\\) coefficients \\(b\\): $$ M_{y,} = \\begin{cases} M^\\textrm{base}_a + M^\\textrm{add} + \\sum_j b^1_j X^1_{y,j} & \\quad = 1\\\\ M^\\textrm{base}_a + \\sum_j b_j X_{y,j} & \\quad = 2, \\ldots, \\end{cases} $$","code":""},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit conditioning model to historical data — fit_CM","text":"Korman, J. Walters, C. 2024. life cycle model Chinook salmon population dynamics. Canadian Contractor Report Hydrography Ocean Sciences 62: vi + 60 p.","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/fit_CM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit conditioning model to historical data — fit_CM","text":"Q. Huynh Stan code provided J. Korman C. Walters","code":""},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate F from harvest rate — get_F","title":"Calculate F from harvest rate — get_F","text":"Solves apical instantaneous fishing mortality rate harvest rate (total retained catch total abundance).","code":""},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate F from harvest rate — get_F","text":"","code":"get_F(u = 0, M, N = 1, vul = 1, ret = 1, release_mort = 0, Fmax = 20)"},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate F from harvest rate — get_F","text":"u Harvest rate, 0-1 M Instantaneous natural mortality rate N Abundance vul Vulnerability ret Retention rate release_mort Release mortality proportion, 0-1. relevant ret < 1. Fmax Maximum allowable value F","code":""},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate F from harvest rate — get_F","text":"Numeric apical F","code":""},{"path":"https://docs.salmonmse.com/reference/glossary.html","id":null,"dir":"Reference","previous_headings":"","what":"salmonMSE glossary — glossary","title":"salmonMSE glossary — glossary","text":"Glossary terms parameters used salmonMSE","code":""},{"path":"https://docs.salmonmse.com/reference/glossary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"salmonMSE glossary — glossary","text":"","code":"data(glossary) glossary[1:2, ] #>                 Definition               Type Class Slot #> 1  Natural origin spawners Natural production  SMSE  NOS #> 2 Hatchery origin spawners           Hatchery  SMSE  HOS"},{"path":"https://docs.salmonmse.com/reference/plot_LHG.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot life history groups and release strategies — plot_LHG","title":"Plot life history groups and release strategies — plot_LHG","text":"Plot annual proportions life history groups (natural origin fish) release strategies (hatchery origin) various life stages","code":""},{"path":"https://docs.salmonmse.com/reference/plot_LHG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot life history groups and release strategies — plot_LHG","text":"","code":"plot_LHG(   SMSE,   var = \"NOS\",   type = c(\"prop\", \"abs\"),   s = 1,   FUN = median,   figure = TRUE,   xlab = \"Projection Year\",   ylab,   name )  plot_RS(   SMSE,   var = \"HOS\",   type = c(\"prop\", \"abs\"),   s = 1,   FUN = median,   figure = TRUE,   xlab = \"Projection Year\",   ylab,   name )"},{"path":"https://docs.salmonmse.com/reference/plot_LHG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot life history groups and release strategies — plot_LHG","text":"SMSE Class SMSE object returned salmonMSE() var Character. Slot state variables SMSE@Misc$LHG[[1]] SMSE@Misc$RS[[1]]. type Character indicate whether plot proportion absolute numbers s Integer. Population index multi-population model (e.g., s = 1 first population model) FUN Summarizing function across simulations, typically median() mean() figure Logical, whether generate figure (set FALSE using function return data matrix) xlab Character. Name time variable figure ylab Character. Name state variable figure name Character. Vector names life history groups release strategies","code":""},{"path":"https://docs.salmonmse.com/reference/plot_LHG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot life history groups and release strategies — plot_LHG","text":"Base graphics figure, barplot distribution total numbers LHG RS. Returns invisibly matrix plotted values","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/plot_decision_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Decision table of performance metrics — plot_decision_table","title":"Decision table of performance metrics — plot_decision_table","text":"Generates coloured table performance metric across two axes, may population dynamics variable (e.g., productivity) management action (e.g., hatchery production levels harvest strategy). See example https://docs.salmonmse.com/articles/decision-table.html","code":""},{"path":"https://docs.salmonmse.com/reference/plot_decision_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decision table of performance metrics — plot_decision_table","text":"","code":"plot_decision_table(x, y, z, title, xlab, ylab)"},{"path":"https://docs.salmonmse.com/reference/plot_decision_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decision table of performance metrics — plot_decision_table","text":"x Atomic, vector values x axis (length z). converted factors y Atomic, vector values y axis (length z). converted factors z Numeric, vector values performance metric title Character, optional title figure xlab Character, optional x-axis label ylab Character, optional y-axis label","code":""},{"path":"https://docs.salmonmse.com/reference/plot_decision_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decision table of performance metrics — plot_decision_table","text":"ggplot object","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/plot_statevar_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot core output from salmonMSE — plot_statevar_ts","title":"Plot core output from salmonMSE — plot_statevar_ts","text":"Various functions plot state variables salmonMSE projections: plot_statevar_ts() produces time series simulations, confidence intervals plot_statevar_hist() produces histogram across simulations particular year plot_spawners() produces summary barplot spawners, including NOS, HOS, wild spawners plot_escapement() produces summary figure proportion spawners broodtake escapement plot_fitness() produces summary figure metrics (fitness, PNI, pHOS, pWILD) related hatchery production plot_fishery() produces summary figure metrics related fishery, e.g., median catch, exploitation rate harvest rate","code":""},{"path":"https://docs.salmonmse.com/reference/plot_statevar_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot core output from salmonMSE — plot_statevar_ts","text":"","code":"plot_statevar_ts(   SMSE,   var = \"PNI\",   s = 1,   figure = TRUE,   xlab = \"Projection Year\",   quant = FALSE,   ylab = var,   ylim,   ... )  plot_statevar_hist(SMSE, var = \"PNI\", s = 1, y, figure = TRUE, xlab = var, ...)  plot_spawners(SMSE, s = 1, prop = TRUE, FUN = median, figure = TRUE, ylim)  plot_fitness(SMSE, s = 1, FUN = median, figure = TRUE, ylim)  plot_escapement(SMSE, s = 1, FUN = median, figure = TRUE, ylim)  plot_fishery(   SMSE,   s = 1,   type = c(\"catch\", \"exploit\", \"harvest\"),   FUN = median,   figure = TRUE,   ylim,   ylab,   ... )  plot_Kobe(   SMSE,   s = 1,   FUN = median,   figure = TRUE,   xlim,   ylim,   xlab = expression(NOS/S[MSY]),   ylab = expression(U/U[MSY]),   type = c(\"T\", \"PT\") )"},{"path":"https://docs.salmonmse.com/reference/plot_statevar_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot core output from salmonMSE — plot_statevar_ts","text":"SMSE Class SMSE object returned salmonMSE() var Character. Slot state variable SMSE object. See slotNames(SMSE) options. Additional supported options : \"ESS\" (egg-smolt survival), \"pbrood\" (broodtake escapement ratio), \"pNOSesc\" (NOS/natural escapement), \"pHOSesc\" (HOS/hatchery escapement), NOS/SMSY, S/SMSY, NOS/Sgen. s Integer. Population index multi-population model (e.g., s = 1 first population model) figure Logical, whether generate figure (set FALSE using function return data matrix) xlab Character. Name time variable figure quant Logical, whether plot individual simulations (FALSE) median 95 percent confidence intervals (TRUE) ylab Character. Name state variable figure ylim Vector. Y-axis limits ... Additional arguments base plot function y Integer. Projection year state variable plot histogram. missing, last projection year used. prop Logical, whether plot proportions absolute numbers FUN Summarizing function across simulations, typically median() mean() type plot_Kobe, fishery state variable plot. Whether plot exploitation rate terminal (T) pre-terminal fishery (PT). xlim Vector. X-axis limits","code":""},{"path":"https://docs.salmonmse.com/reference/plot_statevar_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot core output from salmonMSE — plot_statevar_ts","text":"Functions return matrix plotted values invisibly. Figure plotted base graphics","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/plot_tradeoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Tradeoff figure — plot_tradeoff","title":"Tradeoff figure — plot_tradeoff","text":"Generates tradeoff figure, comparison two performance metrics, across two variables may represent population dynamics variable (e.g., productivity) management action (e.g., hatchery production levels harvest strategy). See example https://docs.salmonmse.com/articles/decision-table.html","code":""},{"path":"https://docs.salmonmse.com/reference/plot_tradeoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tradeoff figure — plot_tradeoff","text":"","code":"plot_tradeoff(pm1, pm2, x1, x2, xlab, ylab, x1lab, x2lab)"},{"path":"https://docs.salmonmse.com/reference/plot_tradeoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tradeoff figure — plot_tradeoff","text":"pm1 Numeric matrix. vector values first performance metric x-axis. Alternatively, provide three column matrix corresponding lower bound, central tendency, upper bound. pm2 Numeric matrix. vector values second performance metric y-axis (length pm1). Alternatively, provide three column matrix corresponding lower bound, central tendency, upper bound. x1 Atomic, vector values first grouping variable. Various levels represented colours. length pm1. x2 Numeric, vector values second grouping variable. Various levels represented shapes. length pm1. xlab Character, optional x-axis label ylab Character, optional y-axis label x1lab Character, optional label first grouping variable x2lab Character, optional label second grouping variable","code":""},{"path":"https://docs.salmonmse.com/reference/plot_tradeoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tradeoff figure — plot_tradeoff","text":"ggplot object","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate markdown reports — report","title":"Generate markdown reports — report","text":"Generate markdown report outcomes single operating model projection","code":""},{"path":"https://docs.salmonmse.com/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate markdown reports — report","text":"","code":"# S4 method for class 'SMSE' report(   object,   name = object@Name,   filename = \"SMSE\",   dir = tempdir(),   open_file = TRUE,   render_args = list(),   ... )"},{"path":"https://docs.salmonmse.com/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate markdown reports — report","text":"object SMSE object name Character string model name include report, e.g., model run number. filename Character string name markdown HTML files. dir directory markdown HTML files saved. open_file Logical, whether HTML document opened rendered. render_args List arguments pass rmarkdown::render(). ... Additional arguments (used)","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal salmonMSE functions for converting operating model inputs and outputs — make_Harvest_MMP","title":"Internal salmonMSE functions for converting operating model inputs and outputs — make_Harvest_MMP","text":"SOM2MOM() converts salmon operating model (SOM) multi-stock operating model (MOM) make_Stock() creates Stock object (openMSE) corresponding salmon life stage make_Fleet() creates Fleet object (openMSE) corresponding fishery interacts various salmon life stages multiHist2SHist() converts openMSE historical reconstruction salmon Hist object (SHist) MMSE2SMSE() converts openMSE projection output, along additional state variables recorded salmonMSE_env, salmon MSE object (SMSE) make_Harvest_MMP() creates multi-stock management procedure harvest component operating model specifying exploitation rates updating formal arguments Harvest_MMP() salmonMSE() wrapper function coordinates simulation output.","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal salmonMSE functions for converting operating model inputs and outputs — make_Harvest_MMP","text":"","code":"make_Harvest_MMP(SOM, check = TRUE)  MMSE2SMSE(MMSE, SOM, Harvest_MMP, N, stateN, Ford, H, stateH)  SOM2MOM(SOM, check = TRUE)  make_Stock(   SOM,   s = 1,   g = 1,   r = 1,   NOS = TRUE,   stage = c(\"immature\", \"return\", \"escapement\") )  make_Fleet(SOM, s, NOS = TRUE, stage = c(\"immature\", \"return\", \"escapement\"))  multiHist2SHist(multiHist, SOM, check = TRUE)"},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal salmonMSE functions for converting operating model inputs and outputs — make_Harvest_MMP","text":"SOM object class SOM check Logical, whether check SOM object using check_SOM() MMSE Object class MMSE returned MSEtool Harvest_MMP Optional harvest function created make_Harvest_MMP() N Data frame natural origin abundance age saved salmonMSE_env environment simulation stateN Data frame natural origin state variables saved salmonMSE_env environment simulation Ford Data frame phenotypic trait values saved salmonMSE_env environment simulation H Data frame hatchery origin abundance age saved salmonMSE_env environment simulation stateH Data frame hatchery origin state variables saved salmonMSE_env environment simulation s Integer, population integer create Stock Fleet object g Integer, life history group create Stock object. relevant NOS = FALSE r Integer, hatchery release group create Stock object. relevant NOS = TRUE NOS Logical, whether Stock Fleet object corresponds natural origin hatchery origin fish stage Character indicating corresponding salmon life stage Stock Fleet object multiHist Class multiHist object returned MSEtool","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal salmonMSE functions for converting operating model inputs and outputs — make_Harvest_MMP","text":"make_Harvest_MMP: Function class \"MMP\" updating formal arguments Harvest_MMP() MMSE2SMSE: SMSE object SOM2MOM: MOM object make_Stock: List containing Stock object accompanying custom parameters list make_Stock: List containing Fleet object accompanying custom parameters list multiHist2SHist: SHist object","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Run salmonMSE — salmonMSE","title":"Run salmonMSE — salmonMSE","text":"salmonMSE() runs salmon management strategy evaluation following steps: Converts salmon operating model (SOM) multi-stock operating model (MOM) via SOM2MOM() Creates harvest management procedure specifying harvest control rule Generates historical reconstruction state variables Runs projection (Hist = FALSE) Converts openMSE output, along additional state variables recorded salmonMSE_env, salmon MSE object (SMSE) via MMSE2SMSE()","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run salmonMSE — salmonMSE","text":"","code":"salmonMSE(SOM, Hist = FALSE, silent = FALSE, trace = FALSE, convert = TRUE)"},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run salmonMSE — salmonMSE","text":"SOM object class SOM Hist Logical, whether stop function stop historical simulations? silent Logical, whether report progress console trace Logical, whether report additional messages openMSE convert Logical, whether convert output salmon MSE (SHist SMSE, depending Hist) object","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run salmonMSE — salmonMSE","text":"Hist = TRUE: convert = TRUE, SHist object convert = FALSE, multiHist object (list). Hist = FALSE: convert = TRUE, SMSE object convert = FALSE, MMSE object.","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","title":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","text":"Environment store salmon specific variables, e.g, fitness, simulation","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","text":"","code":"salmonMSE_env"},{"path":"https://docs.salmonmse.com/reference/salmonMSE_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","text":"object class environment length 5.","code":""},{"path":"https://docs.salmonmse.com/reference/smolt_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict smolt production — smolt_func","title":"Predict smolt production — smolt_func","text":"Internal function predicts natural origin hatchery origin smolt production escapement, saves state variables salmonMSE_env. smolt_func() population dynamics function makeRel_smolt() generates list openMSE use simulations","code":""},{"path":"https://docs.salmonmse.com/reference/smolt_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict smolt production — smolt_func","text":"","code":"smolt_func(   Nage_NOS,   Nage_HOS,   x = -1,   y,   output = c(\"natural\", \"hatchery\"),   s_enroute,   p_female,   fec,   SRRpars,   hatchery_args,   fitness_args,   habitat_args,   s,   g,   prop_LHG,   r )  makeRel_smolt(   p_smolt = 1,   s = 1,   p_natural,   p_hatchery = NULL,   output = c(\"natural\", \"hatchery\"),   s_enroute,   p_female,   fec,   SRRpars,   hatchery_args,   fitness_args,   habitat_args,   g,   prop_LHG,   r )"},{"path":"https://docs.salmonmse.com/reference/smolt_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict smolt production — smolt_func","text":"Nage_NOS Matrix [n_age, n_g] natural escapement openMSE. n_g number life history groups (divisons within cohorts contribute spawning. Nage_HOS Matrix [n_age, n_g] hatchery escapement openMSE. n_g number life history groups (divisons within cohorts contribute spawning. x Integer, simulation number openMSE y Integer, simulation year (including historical years) output Character, whether predic natural origin hatchery origin smolt production s_enroute Numeric, en route survival escapement spawning grounds p_female Numeric, proportion female calculating egg production. fec Vector [maxage]. fecundity age schedule spawners SRRpars Data frame containing stock recruit parameters natural smolt production egg production. Column names include: SRrel, kappa, capacity, Smax, phi hatchery_args Named list containing various arguments controlling broodtake hatchery production. See details . fitness_args Named list containing various arguments controlling population fitness hatchery production. Names include: fitness_type, omega2, theta, fitness_variance, heritability, zbar_start, fitness_floor, rel_loss s Integer, salmonMSE population index. Used report variables salmonMSE_env. g Integer life history group natural origin fish pass parameter back openMSE (output = \"natural\") prop_LHG Numeric, proportion egg production assign life history group g corresponding p_smolt next generation (used output = \"natural\") r Integer release strategy hatchery origin fish pass parameter back openMSE (output = \"hatchery\") p_smolt Integer, population index smolt production openMSE model, corresponding output p_natural Integer vector, population index natural origin escapement openMSE model. Can one spawning multiple life history groups p_hatchery Integer vector, population index hatchery origin escapement openMSE model. Can one multiple release strategies. Set NULL hatchery production","code":""},{"path":"https://docs.salmonmse.com/reference/smolt_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict smolt production — smolt_func","text":"smolt_func() returns numeric ratio realized smolt production vs. hypothetical value hatchery, en route mortality, habitat improvement makeRel_smolt() returns list passed openMSE inter-population relationship","code":""},{"path":"https://docs.salmonmse.com/reference/smolt_func.html","id":"hatchery-args","dir":"Reference","previous_headings":"","what":"hatchery_args","title":"Predict smolt production — smolt_func","text":"Hatchery control parameters included named list following arguments: egg_target Numeric, target egg production hatchery. Set zero hatchery production. ptarget_NOB Numeric, target proportion natural origin broodtake relative overall broodtake pmax_NOB Numeric, maximum proportion natural origin escapement used broodtake fec_brood Vector [maxage]. fecundity age schedule broodtake calculate total hatchery egg production s_yearling Numeric, survival eggs smolt life stage (yearling release) s_subyearling Numeric. survival eggs subyearling life stage (subyearling release) p_yearling Numeric, proportion annual releases yearling life stage (vs. subyearling) phatchery Numeric, proportion hatchery origin escapement return hatchery, example, removal spawning grounds swim-facilities. fish available broodtake. premove_HOS Numeric, proportion hatchery origin escapement removed spawning grounds (order ensure high proportion NOS). fish available broodtake. example, value less one can represent imperfect implementation weir removal. s_prespawn Numeric, survival broodtake prior egg production. 1 - s_prespawn proportion fish used hatchery purposes, e.g., mortality resesarch purposes. Used back-calculate broodtake. gamma Numeric, relative reproductive success hatchery origin spawners (relative natural origin spawners) m Numeric, mark rate selective broodtake","code":""}]

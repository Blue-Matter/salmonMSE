[{"path":"https://docs.salmonmse.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.salmonmse.com/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"salmonMSE Copyright (C) 2024  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. salmonMSE  Copyright (C) 2024 This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"Dynamics equations","text":"Definition variable names corresponding slots either input (SOM) output (SMSE) objects salmonMSE.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"natural-production","dir":"Articles","previous_headings":"","what":"Natural production","title":"Dynamics equations","text":"First, consider natural production absence fitness effects hatchery improvement.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"fry","dir":"Articles","previous_headings":"Natural production","what":"Fry","title":"Dynamics equations","text":"spawners (NOS HOS) age \\(\\) year \\(y\\), corresponding fry production subsequent generation calculated : \\[\\begin{align} \\textrm{Fry}^\\textrm{NOS}_y &= \\sum_a\\textrm{NOS}_{y,} \\times p^\\textrm{female} \\times \\textrm{Fec}_a\\\\ \\textrm{Fry}^\\textrm{HOS}_y &= \\sum_a\\textrm{HOS}_{\\textrm{eff}y,} \\times p^\\textrm{female} \\times \\textrm{Fec}_a \\end{align}\\] \\(\\textrm{HOS}_{\\textrm{eff}} = \\gamma \\times \\textrm{HOS}\\) superscript denotes parentage progeny.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"smolts","dir":"Articles","previous_headings":"Natural production","what":"Smolts","title":"Dynamics equations","text":"Survival smolt stage density-dependent. Beverton-Holt stock-recruit relationship, smolt production \\[\\begin{align} \\textrm{Smolt}^\\textrm{NOS}_{y+1} &= \\frac{\\alpha \\times \\textrm{Fry}^\\textrm{NOS}_y}{1 + \\beta(\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y)}\\\\ \\textrm{Smolt}^\\textrm{HOS}_{y+1} &= \\frac{\\alpha \\times \\textrm{Fry}^\\textrm{HOS}_y}{1 + \\beta(\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y)} \\end{align}\\] \\(\\alpha = \\kappa/\\phi\\) \\(\\beta = \\alpha/{C_\\textrm{smolt}}\\). Ricker stock-recruit relationship, smolt production \\[\\begin{align} \\textrm{Smolt}^\\textrm{NOS}_{y+1} &= \\alpha \\times \\textrm{Fry}^\\textrm{NOS}_y\\times\\exp(-\\beta[\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y])\\\\ \\textrm{Smolt}^\\textrm{HOS}_{y+1} &= \\alpha \\times \\textrm{Fry}^\\textrm{HOS}_y\\times\\exp(-\\beta[\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y]) \\end{align}\\] \\(\\alpha = \\kappa/\\phi\\) \\(\\beta = 1/{S_\\textrm{max}}\\), unfished egg per smolt \\(\\phi = \\sum_a\\left(\\prod_{=1}^{-1}\\exp(-M^\\textrm{NOS}_i)(1-r_i)\\right)\\times r_a \\times p^\\textrm{female} \\times \\textrm{Fec}_a\\), \\(r_a\\) maturity age. knife-edge maturity, .e., fish mature age, equation simplifies \\(\\phi = \\textrm{SAR} \\times p^\\textrm{female} \\times \\textrm{Fec}\\), \\(\\textrm{SAR}\\) marine survival.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"habitat-improvement","dir":"Articles","previous_headings":"","what":"Habitat improvement","title":"Dynamics equations","text":"Habitat improvement can improve either productivity parameter, capacity parameter, . Base terms \\(\\alpha\\) \\(\\beta\\) used historical period model, e.g., conditioning data. projection, stock recruit parameters \\(\\alpha^\\prime\\) \\(\\beta^\\prime\\) updated improvement parameters, \\(I_\\kappa\\) \\(I_C\\), specified operating model. corresponding parameters projection : \\[\\begin{align} \\alpha^\\prime &= \\dfrac{\\kappa}{\\phi}\\times I_\\kappa\\\\ \\beta^\\prime &= \\begin{cases} \\dfrac{\\alpha^\\prime}{C_\\textrm{smolt} \\times I_C} & \\textrm{Beverton-Holt}\\\\ \\dfrac{1}{S_\\textrm{max} \\times I_C} & \\textrm{Ricker}\\\\ \\end{cases} \\end{align}\\]  Comparison change two density-dependent stock-recruit functions improvement parameter applied either compensation ratio (kappa) capacity parameter. base value kappa 3, Beverton-Holt capacity 1000, Ricker Smax 500. dotted line one--one unfished replacement line (corresponding \\(1/\\phi\\)).","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"broodtake","dir":"Articles","previous_headings":"Hatchery production","what":"Broodtake","title":"Dynamics equations","text":"annual target egg production hatchery calculated target releases \\[ \\textrm{Egg}_\\textrm{broodtake} = \\dfrac{n^\\textrm{yearling}}{s^\\textrm{yearling}} + \\dfrac{n^\\textrm{subyearling}}{s^\\textrm{subyearling}} \\] \\(s\\) corresponding survival term egg life stage. Given escapement year \\(y\\), proportion escapement taken broodtake \\(p^\\textrm{broodtake}\\): \\[\\begin{align} \\textrm{NOB}_{y,} &= p^\\textrm{broodtake,NOB}_y \\times \\textrm{}^\\textrm{escapement}_{y,}\\\\ \\textrm{HOB}_{y,} &= p^\\textrm{broodtake,HOB}_y \\times p^\\textrm{hatchery} \\times \\textrm{HOR}^\\textrm{escapement}_{y,} \\end{align}\\] proportion available hatchery fish broodtake controlled \\(p^\\textrm{hatchery}\\), can include fish swimming back hatchery removed spawning grounds. realized hatchery egg production year \\(y\\) \\[\\begin{align} \\textrm{Egg}_\\textrm{y}^\\textrm{NOB} &= \\sum_a \\textrm{NOB}_{y,} \\times s^\\textrm{prespawn} \\times p^\\textrm{female} \\times \\textrm{Fec}^\\textrm{brood}_a\\\\ \\textrm{Egg}_\\textrm{y}^\\textrm{HOB} &= \\sum_a \\textrm{HOB}_{y,} \\times s^\\textrm{prespawn} \\times p^\\textrm{female} \\times \\textrm{Fec}^\\textrm{brood}_a \\end{align}\\] proportion taken broodtake solved annually satisfy following conditions: \\(\\dfrac{\\sum_a\\textrm{NOB}_{y,}}{\\sum_a\\textrm{NOB}_{y,} + \\sum_a\\textrm{HOB}_{y,}} = p^\\textrm{NOB}_\\textrm{target}\\) \\(0 < p^\\textrm{broodtake,HOB} < 1\\) \\(0 < p^\\textrm{broodtake,NOB} < p^\\textrm{NOB}_\\textrm{max}\\) \\(\\textrm{Egg}_\\textrm{y}^\\textrm{NOB} + \\textrm{Egg}_\\textrm{y}^\\textrm{HOB} = \\textrm{Egg}_\\textrm{broodtake}\\) NOB target ratio \\(p^\\textrm{NOB}_\\textrm{target}\\) ensures sufficiently high proportion natural origin fish broodtake, maximum removal rate natural origin fish \\(p^\\textrm{NOB}_\\textrm{max}\\) ensures remains sufficiently high abundance natural origin spawners. Egg production subject survival term \\(s^\\textrm{prespawn}\\). total egg production given year can fail reach target insufficient natural origin escapement. case, NOB take set maximum removal rate (\\(p^\\textrm{broodtake,NOB} = p^\\textrm{NOB}_\\textrm{max}\\)), remaining deficit egg production met using HOB.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"smolt-releases","dir":"Articles","previous_headings":"Hatchery production","what":"Smolt releases","title":"Dynamics equations","text":"total broodtake, smolt releases calculated \\[ \\textrm{Smolt}^\\textrm{Rel}_{y+1} = (\\textrm{Egg}_\\textrm{y}^\\textrm{NOB} + \\textrm{Egg}_\\textrm{y}^\\textrm{HOB}) s^\\textrm{hatchery} \\] survival hatchery egg smolt weighted average proportion yearling subyearling releases: \\(s^\\textrm{hatchery} = s^\\textrm{subyearling} (1 - p^\\textrm{yearling}) + s^\\textrm{yearling} p^\\textrm{yearling}\\) \\(p^\\textrm{yearling} = n^\\textrm{yearling}/(n^\\textrm{subyearling} + n^\\textrm{yearling})\\)","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"pre-terminal-fishery","dir":"Articles","previous_headings":"","what":"Pre-terminal fishery","title":"Dynamics equations","text":"Let \\(N^\\textrm{juv}_{y,}\\) juvenile abundance population \\(N^\\textrm{juv,NOS}_{y,=1} = \\textrm{Smolt}^\\textrm{NOS}_y + \\textrm{Smolt}^\\textrm{HOS}_y\\) \\(N^\\textrm{juv,HOS}_{y,=1} = \\textrm{Smolt}^\\textrm{Rel}\\). superscript smolt variable corresponds parentage superscript \\(N\\) denotes origin current cohort. Harvest \\(u^\\textrm{PT}\\) pre-terminal (\\(\\textrm{PT}\\)) fishery, assuming mark-selective fishing, modeled seasonal process. kept catch \\(K\\) \\[\\begin{align} K^\\textrm{NOS,PT}_{y,} &= \\left(1 - \\exp(-v^\\textrm{PT}_a F^\\textrm{PT}_y)\\right)N^\\textrm{juv,NOS}_{y,}\\\\ K^\\textrm{HOS,PT}_{y,} &= \\left(1 - \\exp(-v^\\textrm{PT}_a F^\\textrm{PT}_y)\\right)N^\\textrm{juv,HOS}_{y,}\\\\ \\end{align}\\] instantaneous fishing mortality solved meet following condition \\[ u^\\textrm{PT} = \\dfrac{\\sum_a K^\\textrm{NOS,PT}_{y,} + \\sum_a K^\\textrm{HOS,PT}_{y,}}{\\sum_a N^\\textrm{juv,NOS}_{y,} + \\sum_a N^\\textrm{juv,HOS}_{y,}} \\]","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"recruitment-and-maturity","dir":"Articles","previous_headings":"","what":"Recruitment and maturity","title":"Dynamics equations","text":"recruitment calculated survival juvenile fish pre-terminal harvest maturation: \\[\\begin{align} \\textrm{}_{y,} &= N^\\textrm{juv,NOS}_{y,}\\exp(-v_aF^\\textrm{PT}_y)r_{y,}\\\\ \\textrm{HOR}_{y,} &= N^\\textrm{juv,HOS}_{y,}\\exp(-v_aF^\\textrm{PT}_y)r_{y,} \\end{align}\\] juvenile abundance following year consists fish mature subsequently survived ocean mortality \\(M\\): \\[\\begin{align} N^\\textrm{juv,NOS}_{y+1,+1} &= N^\\textrm{juv,NOS}_{y,}\\exp\\left(-[v_aF^\\textrm{PT}_y + M^\\textrm{NOS}_{y,}]\\right)(1 - r_{y,})\\\\ N^\\textrm{juv,HOS}_{y+1,+1} &= N^\\textrm{juv,HOS}_{y,}\\exp\\left(-[v_aF^\\textrm{PT}_y + M^\\textrm{HOS}_{y,}]\\right)(1 - r_{y,}) \\end{align}\\]","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"terminal-fishery","dir":"Articles","previous_headings":"Recruitment and maturity","what":"Terminal fishery","title":"Dynamics equations","text":"Assuming mark-selective fishing, retained catch terminal (\\(\\textrm{T}\\)) fishery calculated harvest rate similarly pre-terminal fishery: \\[\\begin{align} K^\\textrm{NOS,T}_{y,} &= \\left(1 - \\exp(-v^\\textrm{T}_a F^\\textrm{T}_y)\\right)\\textrm{}_{y,}\\\\ K^\\textrm{HOS,T}_{y,} &= \\left(1 - \\exp(-v^\\textrm{T}_a F^\\textrm{T}_y)\\right)\\textrm{HOR}_{y,}\\\\ \\end{align}\\] subject \\[ u^\\textrm{T} = \\dfrac{\\sum_a K^\\textrm{NOS,T}_{y,} + \\sum_a K^\\textrm{HOS,T}_{y,}}{\\sum_a \\textrm{}_{y,} + \\sum_a \\textrm{HOR}_{y,}} \\]","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"escapement-and-spawners","dir":"Articles","previous_headings":"","what":"Escapement and spawners","title":"Dynamics equations","text":"escapement consists survivors terminal fishery: \\[\\begin{align} \\textrm{}^\\textrm{escapement}_{y,} &= \\textrm{}_{y,}\\exp(-v_aF^\\textrm{T}_y)\\\\ \\textrm{HOR}^\\textrm{escapement}_{y,} &= \\textrm{HOR}_{y,}\\exp(-v_aF^\\textrm{T}_y) \\end{align}\\] abundance natural origin spawners consists escapement reduced broodtake. \\[ \\textrm{NOS}_{y,} = (1 - p^\\textrm{broodtake,NOB}_y) \\textrm{}^\\textrm{escapement}_{y,} \\] hatchery origin spawners escapement, reduced proportion \\(p^\\textrm{hatchery}\\) returning hatchery, either swim-facilities direct removal. second removal term \\(p^\\textrm{HOS}_\\textrm{removal}\\) removes fish spawning grounds, animals available broodtake. \\[ \\textrm{HOS}_{y,} = \\textrm{HOR}^\\textrm{escapement}_{y,} (1 - p^\\textrm{hatchery}) (1 - p^\\textrm{HOS}_\\textrm{removal}) \\]","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"fitness-effects-on-survival","dir":"Articles","previous_headings":"","what":"Fitness effects on survival","title":"Dynamics equations","text":"Reproductive success first generation hatchery fish observed lower natural counterparts, accounted \\(\\gamma\\) parameter (see review Withler et al. 2018). genetic epigenetic factors, survival hatchery juveniles hatchery environment selects fish phenotype best adapted environment, likewise juveniles spawned natural environment. Since traits heritable, fitness natural population can shift away optimum natural environment towards hatchery environment evolutionary time scale, .e., number generations, hatchery fish allowed spawn. described Ford 2002 derived Lande 1976, fitness loss function \\(W\\) individual phenotypic trait value \\(z\\) given environment \\[ W(z) = \\exp\\left(\\dfrac{-(z-\\theta)^2}{2\\omega^2}\\right) \\] \\(\\theta\\) optimum environment \\(\\omega^2\\) fitness variance. phenotypic trait value \\(z\\) population random normal variable mean \\(\\bar{z}\\) variance \\(\\sigma^2\\), mean fitness population generation \\(g\\) \\(\\bar{W}(z) = \\int W(z) f(z) dz\\), \\(f(z)\\) Gaussian probability density function. solution proportional \\[ \\bar{W}(z) \\propto \\exp\\left(\\dfrac{-(\\bar{z}-\\theta)^2}{2(\\omega+\\sigma)^2}\\right) \\] follow mean fitness generation \\(g\\) natural environment: \\[ \\bar{W}^\\textrm{natural}_g = \\exp\\left(\\dfrac{-(\\bar{z}^\\textrm{natural}_g-\\theta^\\textrm{natural})^2}{2(\\omega+\\sigma)^2}\\right) \\] mean phenotype \\(\\bar{z}\\) calculated iteratively, change generation \\(g-1\\) \\(g\\) \\[\\begin{align} \\Delta\\bar{z} &= \\bar{z}_g - \\bar{z}_{g-1} = (\\bar{z}^\\prime_{g-1} - \\bar{z}_{g-1})h^2\\\\ \\bar{z}_g &= \\bar{z}_{g-1} + (\\bar{z}^\\prime_{g-1} - \\bar{z}_{g-1})h^2\\\\ \\end{align}\\] \\(h^2\\) heritability \\(z\\) \\(\\bar{z}^\\prime_{g-1}\\) trait value applying fitness function, defined : \\[\\begin{align} \\bar{z}^\\prime_{g-1} &= \\dfrac{1}{\\bar{W}_{g-1}}\\int W_{g-1}(z)\\times zf(z)dz\\\\ &= \\left(\\dfrac{\\bar{z}_{g-1}\\omega^2 + \\theta \\sigma^2}{\\omega^2 + \\sigma^2} - \\bar{z}_{g-1}\\right)h^2 \\end{align}\\] hatchery program, mean trait value progeny natural environment weighted average mean trait value natural origin spawners natural environment (optimum value \\(\\theta^\\textrm{natural}\\)) hatchery origin spawners hatchery environment (optimum value \\(\\theta^\\textrm{hatchery}\\)): \\[ \\bar{z}^\\textrm{natural}_g = (1 - p^\\textrm{HOSeff}_{g-1}) \\times \\bar{z}^{\\prime\\textrm{natural}}_{g-1} + p^\\textrm{HOSeff}_{g-1} \\times \\bar{z}^{\\prime\\textrm{hatchery}}_{g-1} \\] \\(p^\\textrm{HOSeff} = \\gamma\\times\\textrm{HOS}/(\\textrm{NOS} + \\gamma\\times\\textrm{HOS})\\). Similarly, mean trait value hatchery environment \\(\\bar{z}^\\textrm{hatchery}_g\\) weighted average mean trait value natural origin broodtake natural environment hatchery origin broodtake hatchery environment: \\[ \\bar{z}^\\textrm{hatchery}_g = p^\\textrm{NOB}_{g-1} \\times \\bar{z}^{\\prime\\textrm{natural}}_{g-1} + (1 - p^\\textrm{NOB}_{g-1}) \\times \\bar{z}^{\\prime\\textrm{hatchery}}_{g-1} \\] \\(p^\\textrm{NOB} = \\textrm{NOB}/(\\textrm{NOB} + \\textrm{HOB})\\). fitness variance \\(\\omega^2\\) phenotype variance \\(\\sigma^2\\) assumed constant two environments. fitness variance parameterized relative variance phenotype, .e., \\(\\omega = \\Omega \\sigma\\) \\(\\Omega\\) “selection strength”.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"mixed-brood-year-return","dir":"Articles","previous_headings":"Fitness effects on survival","what":"Mixed brood-year return","title":"Dynamics equations","text":"mixed-brood year return year \\(y\\) across several ages \\(\\) produces smolt cohort year \\(y+1\\), mean trait value cohort calculated weighted average brood year age class fecundity: \\[\\begin{align} \\bar{z}^\\textrm{natural}_{y+1} &= \\sum_a p^\\textrm{NOS}_{y,} \\times \\bar{z}^{\\prime\\textrm{natural}}_{y-} + \\sum_a p^\\textrm{HOSeff}_{y,} \\times  \\bar{z}^{\\prime\\textrm{hatchery}}_{y-}\\\\ \\bar{z}^\\textrm{hatchery}_{y+1} &= \\sum_a p^\\textrm{NOB}_{y,} \\times \\bar{z}^{\\prime\\textrm{natural}}_{y-} + \\sum_a p^\\textrm{HOB}_{y,} \\times  \\bar{z}^{\\prime\\textrm{hatchery}}_{y-} \\end{align}\\] \\(p^\\textrm{NOS}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\textrm{NOS}_{y,}}{\\sum_a\\textrm{Fec}_a(\\textrm{NOS}_{y,} + \\gamma \\times \\textrm{HOS}_{y,})}\\) \\(p^\\textrm{HOSeff}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\gamma \\times \\textrm{HOS}_{y,}}{\\sum_a\\textrm{Fec}_a(\\textrm{NOS}_{y,} + \\gamma \\times \\textrm{HOS}_{y,})}\\) \\(p^\\textrm{NOB}_{y,} = \\dfrac{\\textrm{Fec}^\\textrm{brood}_a \\times \\textrm{NOB}_{y,}}{\\sum_a\\textrm{Fec}^\\textrm{brood}_a(\\textrm{NOB}_{y,} + \\textrm{HOB}_{y,})}\\) \\(p^\\textrm{HOB}_{y,} = \\dfrac{\\textrm{Fec}^\\textrm{brood}_a \\times \\textrm{HOB}_{y,}}{\\sum_a\\textrm{Fec}^\\textrm{brood}_a(\\textrm{NOB}_{y,} + \\textrm{HOB}_{y,})}\\)","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"fitness-loss","dir":"Articles","previous_headings":"Fitness effects on survival","what":"Fitness loss","title":"Dynamics equations","text":"Fitness can reduce survival egg, fry, smolt life stages: \\[\\begin{align} \\textrm{Fry}^\\textrm{NOS}_y &= \\sum_a\\textrm{NOS}_{y,} \\times p^\\textrm{female} \\times \\textrm{Fec}_a \\times (W^\\textrm{nat.}_{y+1})^{\\ell_\\textrm{egg}}\\\\ \\textrm{Fry}^\\textrm{HOS}_y &= \\sum_a\\textrm{HOS}_{\\textrm{eff}y,} \\times p^\\textrm{female} \\times \\textrm{Fec}_a \\times (W^\\textrm{nat.}_{y+1})^{\\ell_\\textrm{egg}} \\end{align}\\] \\[\\begin{align} \\textrm{Smolt}^\\textrm{NOS}_{y+1} &= \\frac{\\alpha^\\prime (W^\\textrm{nat.}_{y+1})^{\\ell_\\textrm{fry}} \\times \\textrm{Fry}^\\textrm{NOS}_y}{1 + \\beta^\\prime(\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y)}\\\\ \\textrm{Smolt}^\\textrm{HOS}_{y+1} &= \\frac{\\alpha^\\prime (W^\\textrm{nat.}_{y+1})^{\\ell_\\textrm{fry}} \\times \\textrm{Fry}^\\textrm{HOS}_y}{1 + \\beta^\\prime(\\textrm{Fry}^\\textrm{NOS}_y + \\textrm{Fry}^\\textrm{HOS}_y)} \\end{align}\\] \\[ M^\\textrm{SAR,NOS}_g = -\\log(\\textrm{SAR}^\\textrm{NOS} \\times (W^\\textrm{nat.}_g)^{\\ell_\\textrm{smolt}}) \\] \\(\\ell_i\\) proportion fitness loss apportioned among three life stages, \\(\\sum_i \\ell_i = 1\\).","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"pni","dir":"Articles","previous_headings":"Fitness effects on survival","what":"PNI","title":"Dynamics equations","text":"PNI (proportionate natural influence) approximation rate gene flow hatchery natural environment, calculated progeny year \\(y+1\\) parental composition year \\(y\\): \\[ \\textrm{PNI}_{y+1} = \\dfrac{\\sum_a p^{\\textrm{NOB}}_{y,}}{\\sum_a p^{\\textrm{NOB}}_{y,} + \\sum_a p^{\\textrm{HOSeff}}_{y,}} \\] Generally, combination minimizing hatchery releases, increasing natural broodtake, reducing number hatchery origin spawners maintains high PNI, .e., low rate gene flow hatchery natural environment.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"wild-salmon","dir":"Articles","previous_headings":"Fitness effects on survival","what":"Wild salmon","title":"Dynamics equations","text":"single brood-year returns, proportion wild salmon, natural origin spawners whose parents also natural spawners, can calculated \\[ p^\\textrm{WILD}_g = (1 - p^\\textrm{HOScensus}_g) \\times \\dfrac{(1 - p^\\textrm{HOScensus}_{g-1})^2} {(1 - p^\\textrm{HOScensus}_{g-1})^2 + 2 \\gamma \\times p^\\textrm{HOScensus}_{g-1}(1 - p^\\textrm{HOScensus}_{g-1}) + \\gamma^2 (p^\\textrm{HOScensus}_{g-1})^2} \\] \\(p^\\textrm{HOScensus} = \\textrm{HOS}/(\\textrm{HOS} + \\textrm{NOS})\\). first term proportion natural spawners current generation \\(g\\). ratio comprising second term discounts proportion current generation include natural spawners whose parents natural spawners. Assuming non-assortative mating, three terms denominator gives composition generation \\(g\\) whose parents natural origin, mixed origin (one parent natural origin hatchery origin), hatchery origin. generalize mixed-brood year return, calculate probability weighted across brood-years age class fecundity: \\[ p^\\textrm{WILD}_y = \\sum_a \\dfrac{\\textrm{NOS}_{y,}}{\\sum_{'}(\\textrm{NOS}_{y,'} + \\textrm{HOS}_{y,'})} \\times \\dfrac{(\\sum_{'} p^\\textrm{NOScensus}_{y-,'})^2} {(\\sum_{'} p^\\textrm{NOScensus}_{y-,'})^2 + 2 \\gamma \\times (\\sum_{'}p^\\textrm{NOScensus}_{y-,'})(\\sum_{'}p^\\textrm{HOScensus}_{y-,'}) + \\gamma^2 (\\sum_{'}p^\\textrm{HOScensus}_{y-,'})^2} \\] \\(p^\\textrm{NOScensus}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\textrm{NOS}_{y,}}{\\sum_a{\\textrm{Fec}_a (\\textrm{NOS}_{y,}} + \\textrm{HOS}_{y,})}\\) \\(p^\\textrm{HOScensus}_{y,} = \\dfrac{\\textrm{Fec}_a \\times \\textrm{HOS}_{y,}}{\\sum_a{\\textrm{Fec}_a (\\textrm{NOS}_{y,}} + \\textrm{HOS}_{y,})}\\) probability finding wild salmon year \\(y\\) sum probabilities finding wild salmon ages. age \\(\\), first ratio probability finding natural spawner year \\(y\\). second ratio probability mating success two parental natural spawners year \\(y-\\) using Punnett square, assuming non-assortative mating across age origin. summation across dummy age variable \\('\\) calculates total proportion spawners given year.","code":""},{"path":"https://docs.salmonmse.com/articles/equations.html","id":"mark-selective-fishing","dir":"Articles","previous_headings":"","what":"Mark-selective fishing","title":"Dynamics equations","text":"mark rate \\(m\\) hatchery fish greater zero, mark-selective fishing implemented pre-terminal terminal fisheries. mark rate proxy retention harvest rate \\(u^\\textrm{harvest}\\) corresponds ratio kept catch abundance. exploitation rate \\(u^\\textrm{exploit}\\) calculated kept catch dead releases. Exploitation rates differ hatchery natural origin fish retention latter. Let instantaneous fishing mortality kept catch released catch \\[\\begin{align} F^\\textrm{kept} &= \\\\ F^\\textrm{rel.} &= (1 - m)\\delta E \\end{align}\\] \\(\\delta\\) proportion released fish die. \\(E\\) index fishing effort, also referred encounter rate fishery, links together \\(F^\\textrm{kept}\\) \\(F^\\textrm{rel.}\\). Intuitively, fishing effort can increase mark-selective fishery compared non-selective fishery. example, mark rate 20 percent, fishing effort 500 percent higher non-selective fishery order attain kept quota bag limit. Additional catch release mortality occurs un-marked fish, according \\(\\delta\\). pre-terminal (\\(\\textrm{PT}\\)) fishery, \\(E\\) solved satisfy following equation hatchery fish: \\[ u^\\textrm{harvest,HOS,PT} = \\dfrac{\\sum_aK^\\textrm{HOS,PT}_{y,}}{\\sum_a N^\\textrm{juv,HOS}_{y,}} \\] kept catch \\(K\\) \\(K^\\textrm{HOS,PT}_{y,} = \\dfrac{F^\\textrm{kept,PT}_y}{F^\\textrm{kept,PT}_y + F^\\textrm{rel,PT}_y}\\left(1 - \\exp(-v^\\textrm{PT}_a[F^\\textrm{kept,PT} + F^\\textrm{rel,PT}])\\right)N^\\textrm{juv,HOS}_{y,}\\). exploitation rate natural origin fish calculated dead discards. exploitation rate hatchery origin fish calculated kept catch dead discards: \\[\\begin{align} u^\\textrm{exploit,NOS,PT}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a F^\\textrm{rel.,PT}_y))N^\\textrm{juv,NOS}_{y,}}{\\sum_a N^\\textrm{juv,NOS}_{y,}}\\\\ u^\\textrm{exploit,HOS,PT}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a[F^\\textrm{kept,PT}_y + F^\\textrm{rel.,PT}_y]))N^\\textrm{juv,HOS}_{y,}}{\\sum_a N^\\textrm{juv,HOS}_{y,}} \\end{align}\\] Similarly, terminal fishery, fishing effort satisfies equation \\[ u^\\textrm{harvest,HOS,T} = \\dfrac{\\sum_aK^\\textrm{HOS,T}_{y,}}{\\sum_a \\textrm{HOR}_{y,}} \\] corresponding exploitation rates: \\[\\begin{align} u^\\textrm{exploit,HOS,T}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a[F^\\textrm{kept,T}_y + F^\\textrm{rel.,T}_y]))\\textrm{HOR}_{y,}}{\\sum_a \\textrm{HOR}_{y,}}\\\\ u^\\textrm{exploit,NOS,T}_y &= \\dfrac{\\sum_a (1 - \\exp(-v_a F^\\textrm{rel,T}_y))^\\textrm{}_{y,}}{\\sum_a \\textrm{}_{y,}} \\end{align}\\]","code":""},{"path":"https://docs.salmonmse.com/articles/introduction.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction","text":"salmonMSE quantitative stochastic decision-support tool Pacific salmon focusing strategic trade-offs among harvest, hatchery habitat management levers. salmonMSE can used risk-based analyses evaluate performance prioritize management actions identify trade-offs towards achieving biological harvest objectives Initial development salmonMSE based -H Analyzer (AHA) spreadsheet models salmon dynamics individual stocks life stages successive generations obtain long-term equilibrium properties state dynamics. Currently, salmonMSE intended used similarly, expands upon population dynamics modeling several ways. accommodate complex life histories, salmonMSE age-structured useful species multiple cohorts overlapping return. Multi-stock models can developed evaluate outcomes stock management unit. Finally, stochasticity can incorporated model incorporate uncertainty understanding stock productivity. openMSE population dynamics model underlying salmonMSE. openMSE intended evaluation management strategies marine fisheries, functionality software can re-purposed model salmon life stages. state variables therefore directly modeled within openMSE, additional state variables needed salmon life history calculated salmonMSE. information, see article population dynamics model. Use openMSE allows rigorous review source code wider user base. However, typical users salmonMSE need see internal conversion salmonMSE openMSE operating models. Inputs outputs salmonMSE use salmon-specific terminology.","code":""},{"path":"https://docs.salmonmse.com/articles/introduction.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Introduction","text":"salmon operating model contains parameters population dynamics management levers implemented. salmonMSE, object class SOM can created constituent objects class Bio, Habitat, Hatchery, Harvest follows: Bio class specify natural production, example, maturity, fecundity, stock-recruit relationship, marine survival. Habitat class specify change stock-recruit relationship (density-dependent smolt production), example, improvements stream habitat. Hatchery class specify parameters surrounding hatchery production, number target releases, removal hatchery spawners maintain high proportions natural spawners, population fitness parameters arising interbreeding hatchery natural spawners. Harvest class specify exploitation rate harvest control rules fishery. Additional slots SOM class control projections, example, number years simulation replicates. Details slots various S4 classes can obtained typing class?SOM R console. simulation can run salmonMSE() function: output class SMSE object containing state variables performance metrics pertaining hatchery dynamics (fitness, PNI, etc.) arrays typically indexed simulation, stock, age, year. example, SMSE@NOS reports natural origin spawners. convenience comparison purposes, salmonMSE distributes implementation AHA R well: resulting output named list following format SMSE object, indexed generation instead year. details also provided example article.","code":"library(salmonMSE)  Bio <- new(\"Bio\", ...) Habitat <- new(\"Habitat\", ...) Hatchery <- new(\"Hatchery\", ...) Harvest <- new(\"Harvest\", ...)  SOM <- new(\"SOM\", Bio, Hatchery, Habitat, Harvest) MSE <- salmonMSE(SOM) SAHA <- AHA(SOM)"},{"path":"https://docs.salmonmse.com/articles/introduction.html","id":"future-development","dir":"Articles","previous_headings":"","what":"Future development","title":"Introduction","text":"Development salmonMSE currently progress. Currently, operating model intended used species fish mature single age operates generational cycle, analogous AHA. Stochasticity incorporated stock-recruit relationship, predicts density-dependent smolt production fry, SAR parameter (survival adult return). Multi-stock models yet supported.","code":""},{"path":"https://docs.salmonmse.com/articles/model.html","id":"multimse","dir":"Articles","previous_headings":"","what":"multiMSE","title":"Implementation of salmon dynamics","text":"salmonMSE takes advantage functionality multiMSE function MSEtool. multiMSE intended multi-population, multi-fleet modeling “population” unit can envisioned combination sex-specific single species model, multi-species model, multi-stock model. Relevant features include: Two-sex models spawning output predict recruitment population linear combination spawning output set populations model Hermaphroditism sex dynamics either females males switch sexes. Mechanistically, abundance moves one population another beginning time step based specified age schedule Inter-population intra-population dynamics biological parameter one population updated abundance biomass set custom written function (“MICE” modeling) Multi-fleet model can used allocate catches among populations fleets Salmon dynamics can represented mechanistically using functionalities: Multi-population models used model salmon life stages. salmon conservation unit (CU), three populations modeled represent immature, mature (recruitment), escapement life stage. Natural hatchery fish also separately modeled, thus, 6 population units needed hatchery CU 3 population units hatchery. Fish progress populations, .e., life stages, based maturity status. Movement fish recruitment escapement life stage occurs year maturity. cohorts advance next age class, life cycle ‘catches ’ generation time remains true real dynamics. next section. Total natural smolt production (immature natural origin fish) predicted spawning output natural hatchery spawners (two population units) function written salmonMSE passed openMSE. function also implements fitness dynamics reduces productivity based ratio hatchery spawners ratio natural broodtake. function also implements hatchery dynamics removing natural hatchery broodtake respective escapement specifies hatchery smolt releases immature hatchery origin fish. Another custom function specifies reduction marine survival due fitness loss multi-fleet model specifies harvest rates pre-terminal terminal fisheries  Representation life cycle stages (blue) modeled openMSE.","code":""},{"path":"https://docs.salmonmse.com/articles/model.html","id":"salmon-considerations","dir":"Articles","previous_headings":"","what":"Salmon considerations","title":"Implementation of salmon dynamics","text":"openMSE models fish populations age-structured array. , can accommodate mixed brood-year returns. additional complexities age structure needs adjusted order model salmon. openMSE, life stage resulting juvenile density-dependent survival occurs time step spawning occurs. However, smolt production occurs year spawning. Therefore, advance age structure escapement one extra year openMSE order ensure smolt production occurs correct time step. reporting array, escapement, abundance spawners, broodtake, spawning output (fry production) adjusted back appropriate biological year. absence hatchery, escapement number spawners. scenario, spawning output smolt production can calculated entirely within openMSE. hatchery, escapement subject broodtake removal hatchery fish spawning grounds. openMSE sees none hatchery dynamics. Instead, MICE function created salmonMSE read natural hatchery escapement openMSE, calculate broodtake, removal hatchery fish spawning grounds, calculate fitness, adjust stock-recruit parameters, apply fitness fry smolt production, return natural smolt production “recruitment deviation” openMSE. multiplicative term adjusts natural smolt production created hatchery (note ‘recruitment’ used refer life stage density-dependent survival, commonly used marine fisheries context, salmon return). function also calculate hatchery smolt releases absolute number openMSE. hermaphroditism feature openMSE, used salmonMSE assign maturity, occurs beginning time step. time, fishing mortality occurs course time step simultaneously natural mortality. However, salmon fisheries typically operate seasonally. pre-terminal fishery occurs early year, followed maturation subsequent terminal fishery later year. words, fish mature within given year vulnerable pre-terminal terminal fisheries. solve order operations problem, openMSE uses two seasonal time steps model full calendar year. pre-terminal fishery operates first half year (odd time steps), maturation happens beginning second half year (even time steps), terminal fishery operates second half year. Ocean mortality occurs immature component second half year. escapement, broodtake, spawning, smolt production operations occur beginning following year (odd time steps, see bullet 1). current front-end requires knowledge seasonal time steps, output reported annual basis.  Summary state variables stored either openMSE salmonMSE. intermediary section consists functions calculate state variables pertaining hatchery habitat management levers.","code":""},{"path":"https://docs.salmonmse.com/articles/model.html","id":"age-structured-representation","dir":"Articles","previous_headings":"","what":"Age-structured representation","title":"Implementation of salmon dynamics","text":"following figure illustrates age structure salmon matures age 3. matrix, abundance age zero age 1 represent abundance fry smolts, respectively. age 2, abundance may represent juvenile fish marine life stage (although may occur course ages 1 2) vulnerable pre-terminal fishery. maturity age 3, abundance beginning time step can return vulnerable terminal fishery. Later year, escapement number spawners also calculated.  Age-structured representation salmon life cycle fish mature age 3. colors represent three generations fish. Various constraints openMSE prevent implementation figure model. First, aren’t enough state variables within single time step calculate escapement implement hatchery broodtake return spawning. Second, density-dependent survival must occur within time step spawning. result, must advance age class additional placeholder age class maturity following year spawning actually occurs. However, can calculate necessary hatchery spawning dynamics, including fry production, salmonMSE merely pass smolt production back openMSE. result age structure ‘catches ’ generational life cycle, shown . Additionally, two seasonal time steps per calendar year needed model maturation cohort timing pre-terminal terminal fishery. result, immature salmon, vulnerability pre-terminal seasonal fishery occurs first half year ocean mortality occurs second half year. salmon mature, vulnerability terminal seasonal fishery occurs second half year. component cohort matures experience ocean mortality last year life.  Salmon age structure implemented openMSE. Missing state variables stored data frame salmonMSE simulation.","code":""},{"path":"https://docs.salmonmse.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Quang Huynh. Author, maintainer.","code":""},{"path":"https://docs.salmonmse.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Huynh Q (2024). salmonMSE: Salmonid management strategy evaluation. R package version 0.0.0.9000, https://docs.salmonmse.com/.","code":"@Manual{,   title = {salmonMSE: Salmonid management strategy evaluation},   author = {Quang Huynh},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://docs.salmonmse.com/}, }"},{"path":"https://docs.salmonmse.com/index.html","id":"salmonmse","dir":"","previous_headings":"","what":"Salmonid management strategy evaluation","title":"Salmonid management strategy evaluation","text":"Salmonid management strategy evaluation salmonMSE decision-support tool Pacific salmon focusing strategic trade-offs among harvest, hatchery habitat management levers. Funding development salmonMSE provided Pacific Salmon Strategy Initiative collaboration Department Fisheries Oceans Canada.","code":""},{"path":"https://docs.salmonmse.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Salmonid management strategy evaluation","text":"Currently, salmonMSE requires developmental version MSEtool. can installed GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"Blue-Matter/MSEtool\") remotes::install_github(\"Blue-Matter/salmonMSE\")"},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":null,"dir":"Reference","previous_headings":"","what":"All-H Analyzer — AHA","title":"All-H Analyzer — AHA","text":"Wrapper function implementation -H Analyzer (AHA) R. Can used compare outputs AHA salmonMSE.","code":""},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-H Analyzer — AHA","text":"","code":"AHA(SOM, ngen = 100, silent = FALSE)"},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All-H Analyzer — AHA","text":"SOM object class SOM ngen Integer, number generations run simulation silent Logical, indicates whether silence messages R console","code":""},{"path":"https://docs.salmonmse.com/reference/AHA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All-H Analyzer — AHA","text":"named list containing vectors state variables (simulation generation). See SMSE object description.","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls biological dynamics, .e., natural production.","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"Various parameters can stochastic (length nsim) input single numeric (value identical across simulations).","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name nsim Integer. Number simulations. maxage Integer. maximum age population age structure. p_mature Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears]. proportion mature age. SRrel Character, stock-recruit relationship density-dependent smolt production. Either \"BH\" (Beverton-Holt) \"Ricker\" capacity_smolt Vector length nsim. asymptote Beverton-Holt stock-recruit function, Ricker maximum density-dependent natural smolt production fry life stage. Units smolts. kappa Vector length nsim. compensation ratio stock-recruit function, .k.. adult productivity. Natural per-capita production recruits population approaches zero (density-independent component). Units recruits per egg. stage-based models, equivalent product smolt productivity (smolts per spawner) marine survival. Smax Vector length nsim. spawning output maximizes smolt production Ricker stock-recruit function. Units egg production. phi Optional parameter, vector length nsim. Unfished egg production rate per smolt. alpha parameter stock-recruit function ratio kappa phi. stage-based models, product marine survival, fecundity, proportion female. provided, phi calculated Mocean_NOS corresponding first year. Mocean_NOS Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears]. Natural mortality immature natural origin fish. replicate SAR parameter stage-specific model, set Mocean_NOS[] = -log(SAR) age class prior maturation (zero ages). fec Vector age (length maxage). Female fecundity natural origin spawners. p_female Numeric. proportion females spawning population.","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Bio\")","code":""},{"path":"https://docs.salmonmse.com/reference/Bio-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Bio\") #> Class \"Bio\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                    #> Name:            Name           nsim         maxage       p_mature #> Class:      character        numeric        numeric      num.array #>                                                                    #> Name:           SRrel capacity_smolt          kappa           Smax #> Class:      character        numeric        numeric        numeric #>                                                                    #> Name:             phi     Mocean_NOS            fec       p_female #> Class:        numeric      num.array        numeric        numeric #>  #> Known Subclasses: \"SOM\""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls habitat management.","code":""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name capacity_smolt_improve Numeric. proportional change smolt capacity parameter projection period. example, 1.1 represents 10 percent improvement. Beverton-Holt function, increases asymptote 10 percent. Ricker function, increases maximum smolt production 10 percent. kappa_improve Numeric. proportional change compensation ratio, .e., changing smolt productivity, projection period. example, 1.1 represents 10 percent improvement.","code":""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Habitat\")","code":""},{"path":"https://docs.salmonmse.com/reference/Habitat-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Habitat\") #> Class \"Habitat\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                             #> Name:                    Name capacity_smolt_improve          kappa_improve #> Class:              character                numeric                numeric #>  #> Known Subclasses: \"SOM\""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls harvest.","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name u_preterminal Numeric. exploitation rate immature stock pre-terminal fishery. u_terminal Numeric. exploitation rate return terminal fishery. m Numeric. mark rate hatchery origin fish, affects fishery selectivity. Mark-selective fishing (MSF) implemented m > 0. release_mort Vector length 2. proportion released fish die release, pre-terminal terminal fishery. Implemented model mark-selective fishing. used m = 0. vulPT Vector length maxage. Vulnerability schedule (0-1) preterminal fishery. vulT Vector length maxage. Vulnerability schedule (0-1) terminal fishery.","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Harvest\")","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Harvest\") #> Class \"Harvest\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                              #> Name:           Name u_preterminal    u_terminal             m  release_mort #> Class:     character       numeric       numeric       numeric       numeric #>                                    #> Name:          vulPT          vulT #> Class:       numeric       numeric #>  #> Known Subclasses: \"SOM\""},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":null,"dir":"Reference","previous_headings":"","what":"Harvest component of operating model — Harvest_MMP","title":"Harvest component of operating model — Harvest_MMP","text":"function used openMSE specify fishing effort projections. salmonMSE updates arguments function salmon operating model.","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harvest component of operating model — Harvest_MMP","text":"","code":"Harvest_MMP(   x = 1,   DataList,   reps = 1,   u_terminal,   u_preterminal,   m,   release_mort,   p_terminal = c(2, 5),   p_preterminal = c(1, 4),   ... )"},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harvest component of operating model — Harvest_MMP","text":"x Simulation number DataList nested list Data objects stock fleet, generated multiMSE() reps number stochastic replicates returned function u_terminal Harvest rate retained catch terminal fishery u_preterminal Harvest rate retained catch pre-terminal fishery m Mark rate hatchery origin fish, proxy fishery retention. used calculate fishing effort. Retention operating model specified MOM object release_mort Length two numeric release mortality discarded fish pre-terminal terminal fishery. used calculate fishing effort. Release mortality operating model specified MOM object p_terminal Population index recruitment experiences terminal fishing mortality p_preterminal Population index immature fish experience pre-terminal fishing mortality ... used","code":""},{"path":"https://docs.salmonmse.com/reference/Harvest_MMP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harvest component of operating model — Harvest_MMP","text":"nested list Rec objects, dimension DataList","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model controls hatchery management.","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"Various parameters can stochastic (length nsim) input single numeric (value identical across simulations). description fitness parameters hatchery dynamics available online documentation.","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name n_yearling Numeric. number yearlings released. hatchery modeled n_yearling n_subyearling zero. n_subyearling Numeric. number subyearlings released. hatchery modeled n_yearling n_subyearling zero. s_prespawn Numeric. survival broodtake prior egg production. 1 - s_prespawn proportion fish used hatchery purposes, e.g., mortality resesarch purposes. Used back-calculate broodtake n_yearling n_subyearling. s_egg_smolt Numeric. survival eggs smolt life stage (yearling release). Used back-calculate broodtake n_yearling n_subyearling. s_egg_subyearling Numeric. survival eggs subyearling life stage (subyearling release). Used back-calculate broodtake n_yearling n_subyearling. Mocean_HOS Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears]. Natural mortality immature hatchery origin fish. replicate SAR parameter stage-specific model, set Mocean_HOS[] = -log(SAR) age class prior maturation (zero ages). gamma Numeric. relative reproductive success hatchery origin spawners (relative natural origin spawners). pmax_NOB Numeric. maximum proportion natural origin escapement used broodtake. ptarget_NOB Numeric. target proportion natural origin broodtake relative overall broodtake. phatchery Numeric. proportion hatchery origin escapement return hatchery, example, removal spawning grounds swim-facilities. fish available broodtake. premove_HOS Numeric. proportion hatchery origin escapement removed spawning grounds (order ensure high proportion NOS). fish available broodtake. example, value less one can represent imperfect implementation weir removal. fec_brood Vector length maxage. fecundity schedule broodtake calculate total egg production hatchery. fitness_type Character. Fitness function hatchery origin spawners. Either \"Ford\" \"none\". theta Vector length 2. optimum phenotype value natural hatchery environments. rel_loss Vector length 3. loss fitness apportioned among egg, fry, smolt life stages. three values sum 1. pbar_start Vector length 2. mean phenotype value natural hatchery population start projection. fitness_variance Numeric. variance phenotype population. Assumed identical natural hatchery environments. selection_strength Numeric. ratio fitness standard deviation phenotype standard deviation. heritability Numeric. heritability phenotypic trait. 0-1. fitness_floor Numeric. minimum fitness value natural environment.","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Hatchery\")","code":""},{"path":"https://docs.salmonmse.com/reference/Hatchery-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Hatchery\") #> Class \"Hatchery\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                 #> Name:                Name         n_yearling      n_subyearling #> Class:          character            numeric            numeric #>                                                                 #> Name:          s_prespawn        s_egg_smolt  s_egg_subyearling #> Class:            numeric            numeric            numeric #>                                                                 #> Name:          Mocean_HOS              gamma           pmax_NOB #> Class:          num.array            numeric            numeric #>                                                                 #> Name:         ptarget_NOB          phatchery        premove_HOS #> Class:            numeric            numeric            numeric #>                                                                 #> Name:           fec_brood       fitness_type              theta #> Class:            numeric          character            numeric #>                                                                 #> Name:            rel_loss         pbar_start   fitness_variance #> Class:            numeric            numeric            numeric #>                                                                 #> Name:  selection_strength       heritability      fitness_floor #> Class:            numeric            numeric            numeric #>  #> Known Subclasses: \"SOM\""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"component operating model specifies historical dynamics.","code":""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name HistSpawner Array [nsim, maxage, nyears, 2]. Spawners age natural environment. fourth dimension, first array corresponds natural origin spawners second array corresponds hatchery origin spawners. Optional HistN Array [nsim, maxage, nyears, 2]. abundance immature fish beginning annual time step. fourth dimension, first array corresponds natural origin fish second array corresponds hatchery origin fish. Default assumes 1000 smolts (age-1) fish annually. HistFPT Vector historical years (nyears) array dimension [nsim, nyears, 2]. instantaneous fishing mortality preterminal fishery. first array slice corresponds F natural origin fish second array slice corresponds hatchery origin fish. Default zero. HistFT Vector historical years (nyears) array dimension [nsim, nyears, 2]. instantaneous fishing mortality terminal fishery. first array slice corresponds F natural origin fish second array slice corresponds hatchery origin fish. Default zero.","code":""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"Historical\")","code":""},{"path":"https://docs.salmonmse.com/reference/Historical-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"Historical\") #> Class \"Historical\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                    #> Name:         Name HistSpawner       HistN     HistFPT      HistFT #> Class:   character       array       array   num.array   num.array #>  #> Known Subclasses: \"SOM\""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Stores outputs simulation salmon operating models.","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"generation \\(t\\), proportionate natural influence (PNI) defined : $$\\textrm{PNI}_t = \\dfrac{p^\\textrm{NOB}_t}{p^\\textrm{NOB}_t + p^\\textrm{HOSeff}_t}$$ \\(p^\\textrm{HOSeff} = \\textrm{HOSeff}/(\\textrm{NOS} + \\textrm{HOSeff})\\). proportion wild salmon defined : $$p^{\\textrm{WILD}}_t = q^\\textrm{HOScen}_t \\dfrac{(q^\\textrm{HOScen}_{t-1})^2} {(q^\\textrm{HOScen}_{t-1})^2 + 2\\gamma \\times p^\\textrm{HOScen}_{t-1} q^\\textrm{HOScen}_{t-1} + \\gamma^2 (p^\\textrm{HOScen}_{t-1})^2}$$ \\(q = 1-p\\) \\(p^\\textrm{HOScen} = \\textrm{HOS}/(\\textrm{NOS} + \\textrm{HOS})\\).","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name nyears Integer. number historical years proyears Integer. number projected years nsim Integer. number simulations nstocks Integer. number stocks Snames Character. Stock names Fry_NOS Array [nsim, nstocks, proyears]. Spawning output natural origin spawners. Fry_HOS Array [nsim, nstocks, proyears]. Spawning output hatchery origin spawners. Smolt_NOS Array [nsim, nstocks, proyears]. Smolts offspring natural origin spawners. Smolt_HOS Array [nsim, nstocks, proyears]. Smolts offspring hatchery origin spawners. Smolt_Rel Array [nsim, nstocks, proyears]. Smolts offspring broodtake, .e., hatchery releases. Return_NOS Array [nsim, nstocks, nage, proyears]. Mature fish natural origin spawners. Return_HOS Array [nsim, nstocks, nage, proyears]. Mature fish hatchery origin spawners. Escapement_NOS Array [nsim, nstocks, nage, proyears]. escapement mature fish natural origin spawners. Escapement_HOS Array [nsim, nstocks, nage, proyears]. escapement mature fish hatchery origin spawners. NOB Array [nsim, nstocks, proyears]. broodtake natural origin spawners. HOB Array [nsim, nstocks, proyears]. broodtake hatchery origin spawners. NOS Array [nsim, nstocks, proyears]. Natural origin spawners. HOS Array [nsim, nstocks, proyears]. Hatchery origin spawners. HOS_effective Array [nsim, nstocks, proyears]. Hatchery origin spawners discounted gamma. KPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery kept catch natural origin spawners. KT_NOS Array [nsim, nstocks, proyears]. Terminal fishery kept catch natural origin spawners. KPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery kept catch hatchery origin spawners. KT_HOS Array [nsim, nstocks, proyears]. Terminal fishery kept catch hatchery origin spawners. DPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery released catch (live dead) natural origin spawners. DT_NOS Array [nsim, nstocks, proyears]. Terminal fishery released catch (live dead) natural origin spawners. DPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery released catch (live dead) hatchery origin spawners. DT_HOS Array [nsim, nstocks, proyears]. Terminal fishery released catch (live dead) hatchery origin spawners. UPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery harvest rate (kept catch) natural origin spawners. UT_NOS Array [nsim, nstocks, proyears]. Terminal fishery harvest rate natural origin spawners. UPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery harvest rate hatchery origin spawners. UT_HOS Array [nsim, nstocks, proyears]. Terminal fishery harvest rate hatchery origin spawners. ExPT_NOS Array [nsim, nstocks, proyears]. Pre-terminal fishery exploitation rate (kept catch dead releases) natural origin spawners. ExT_NOS Array [nsim, nstocks, proyears]. Terminal fishery exploitation rate natural origin spawners. ExPT_HOS Array [nsim, nstocks, proyears]. Pre-terminal fishery exploitation rate hatchery origin spawners. ExT_HOS Array [nsim, nstocks, proyears]. Terminal fishery exploitation rate hatchery origin spawners. fitness Array [nsim, nstocks, proyears]. Fitness natural spawning population. PNI Array [nsim, nstocks, proyears]. Proportionate natural influence, index gene flow hatchery natural environment. p_wild Array [nsim, nstocks, proyears]. Proportion wild spawners, natural spawners whose parents also produced natural environment assuming non-assortative mating, defined Canada's Wild Salmon Policy. Mocean_loss Array [nsim, nstocks, nage, proyears]. Realized natural mortality marine environment due fitness loss. Misc List. Miscellaneous output","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"creating-object","dir":"Reference","previous_headings":"","what":"Creating Object","title":"Class ","text":"Objects can created calls form new(\"SMSE\")","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class ","text":"Withler et al. 2018. Genetically Based Targets Enhanced Contributions Canadian Pacific Chinook Salmon Populations. DFO Can. Sci. Advis. Sec. Res. Doc. 2018/019. xii + 88 p.","code":""},{"path":"https://docs.salmonmse.com/reference/SMSE-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"SMSE\") #> Class \"SMSE\" [package \"salmonMSE\"] #>  #> Slots: #>                                                                    #> Name:            Name         nyears       proyears           nsim #> Class:      character        numeric        numeric        numeric #>                                                                    #> Name:         nstocks         Snames        Fry_NOS        Fry_HOS #> Class:        numeric      character          array          array #>                                                                    #> Name:       Smolt_NOS      Smolt_HOS      Smolt_Rel     Return_NOS #> Class:          array          array          array          array #>                                                                    #> Name:      Return_HOS Escapement_NOS Escapement_HOS            NOB #> Class:          array          array          array          array #>                                                                    #> Name:             HOB            NOS            HOS  HOS_effective #> Class:          array          array          array          array #>                                                                    #> Name:         KPT_NOS         KT_NOS        KPT_HOS         KT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:         DPT_NOS         DT_NOS        DPT_HOS         DT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:         UPT_NOS         UT_NOS        UPT_HOS         UT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:        ExPT_NOS        ExT_NOS       ExPT_HOS        ExT_HOS #> Class:          array          array          array          array #>                                                                    #> Name:         fitness    Mocean_loss            PNI         p_wild #> Class:          array          array          array          array #>                       #> Name:            Misc #> Class:           list"},{"path":"https://docs.salmonmse.com/reference/SOM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"object containing parameters salmon operating model (SOM).","code":""},{"path":"https://docs.salmonmse.com/reference/SOM-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"description fitness parameters hatchery dynamics available online documentation.","code":""},{"path":"https://docs.salmonmse.com/reference/SOM-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"Name Character. Identifying name nyears Integer. number historical years proyears Integer. number projected years seed Integer. random seed ensure users can reproduce results exactly nsim Integer. Number simulations. maxage Integer. maximum age population age structure. p_mature Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears]. proportion mature age. SRrel Character, stock-recruit relationship density-dependent smolt production. Either \"BH\" (Beverton-Holt) \"Ricker\" capacity_smolt Vector length nsim. asymptote Beverton-Holt stock-recruit function, Ricker maximum density-dependent natural smolt production fry life stage. Units smolts. kappa Vector length nsim. compensation ratio stock-recruit function, .k.. adult productivity. Natural per-capita production recruits population approaches zero (density-independent component). Units recruits per egg. stage-based models, equivalent product smolt productivity (smolts per spawner) marine survival. Smax Vector length nsim. spawning output maximizes smolt production Ricker stock-recruit function. Units egg production. phi Optional parameter, vector length nsim. Unfished egg production rate per smolt. alpha parameter stock-recruit function ratio kappa phi. stage-based models, product marine survival, fecundity, proportion female. provided, phi calculated Mocean_NOS corresponding first year. Mocean_NOS Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears]. Natural mortality immature natural origin fish. replicate SAR parameter stage-specific model, set Mocean_NOS[] = -log(SAR) age class prior maturation (zero ages). fec Vector age (length maxage). Female fecundity natural origin spawners. p_female Numeric. proportion females spawning population. capacity_smolt_improve Numeric. proportional change smolt capacity parameter projection period. example, 1.1 represents 10 percent improvement. Beverton-Holt function, increases asymptote 10 percent. Ricker function, increases maximum smolt production 10 percent. kappa_improve Numeric. proportional change compensation ratio, .e., changing smolt productivity, projection period. example, 1.1 represents 10 percent improvement. n_yearling Numeric. number yearlings released. hatchery modeled n_yearling n_subyearling zero. n_subyearling Numeric. number subyearlings released. hatchery modeled n_yearling n_subyearling zero. s_prespawn Numeric. survival broodtake prior egg production. 1 - s_prespawn proportion fish used hatchery purposes, e.g., mortality resesarch purposes. Used back-calculate broodtake n_yearling n_subyearling. s_egg_smolt Numeric. survival eggs smolt life stage (yearling release). Used back-calculate broodtake n_yearling n_subyearling. s_egg_subyearling Numeric. survival eggs subyearling life stage (subyearling release). Used back-calculate broodtake n_yearling n_subyearling. Mocean_HOS Either vector age (length maxage) array dimension [nsim, maxage, nyears+proyears]. Natural mortality immature hatchery origin fish. replicate SAR parameter stage-specific model, set Mocean_HOS[] = -log(SAR) age class prior maturation (zero ages). gamma Numeric. relative reproductive success hatchery origin spawners (relative natural origin spawners). pmax_NOB Numeric. maximum proportion natural origin escapement used broodtake. ptarget_NOB Numeric. target proportion natural origin broodtake relative overall broodtake. phatchery Numeric. proportion hatchery origin escapement return hatchery, example, removal spawning grounds swim-facilities. fish available broodtake. premove_HOS Numeric. proportion hatchery origin escapement removed spawning grounds (order ensure high proportion NOS). fish available broodtake. example, value less one can represent imperfect implementation weir removal. fec_brood Vector length maxage. fecundity schedule broodtake calculate total egg production hatchery. fitness_type Character. Fitness function hatchery origin spawners. Either \"Ford\" \"none\". theta Vector length 2. optimum phenotype value natural hatchery environments. rel_loss Vector length 3. loss fitness apportioned among egg, fry, smolt life stages. three values sum 1. pbar_start Vector length 2. mean phenotype value natural hatchery population start projection. fitness_variance Numeric. variance phenotype population. Assumed identical natural hatchery environments. selection_strength Numeric. ratio fitness standard deviation phenotype standard deviation. heritability Numeric. heritability phenotypic trait. 0-1. fitness_floor Numeric. minimum fitness value natural environment. u_preterminal Numeric. exploitation rate immature stock pre-terminal fishery. u_terminal Numeric. exploitation rate return terminal fishery. m Numeric. mark rate hatchery origin fish, affects fishery selectivity. Mark-selective fishing (MSF) implemented m > 0. release_mort Vector length 2. proportion released fish die release, pre-terminal terminal fishery. Implemented model mark-selective fishing. used m = 0. vulPT Vector length maxage. Vulnerability schedule (0-1) preterminal fishery. vulT Vector length maxage. Vulnerability schedule (0-1) terminal fishery. HistSpawner Array [nsim, maxage, nyears, 2]. Spawners age natural environment. fourth dimension, first array corresponds natural origin spawners second array corresponds hatchery origin spawners. Optional HistN Array [nsim, maxage, nyears, 2]. abundance immature fish beginning annual time step. fourth dimension, first array corresponds natural origin fish second array corresponds hatchery origin fish. Default assumes 1000 smolts (age-1) fish annually. HistFPT Vector historical years (nyears) array dimension [nsim, nyears, 2]. instantaneous fishing mortality preterminal fishery. first array slice corresponds F natural origin fish second array slice corresponds hatchery origin fish. Default zero. HistFT Vector historical years (nyears) array dimension [nsim, nyears, 2]. instantaneous fishing mortality terminal fishery. first array slice corresponds F natural origin fish second array slice corresponds hatchery origin fish. Default zero.","code":""},{"path":"https://docs.salmonmse.com/reference/SOM-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created calls form new(\"SOM\", Bio, Habitat, Hatchery, Harvest, Historical).","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate abundance from density-dependent mortality — calc_SRR","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"Calculates abundance survivors applying either Beverton-Holt Ricker stock-recruit relationship.","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"","code":"calc_SRR(N1, N2 = N1, p, capacity, type = c(\"BH\", \"Ricker\"))"},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"N1 Numeric, initial abundance scales density-independent survival term N2 Numeric, initial abundance scales density-dependent survival term p Numeric, productivity parameter sets maximum survival initial abundance approaches zero capacity Numeric, capacity parameter set maximum survivors type Character, functional form stock-recruit relationship","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"calc_SRR calculates abundance survivors calc_SRRpars calculates alpha beta terms productivity parameter terms abundance N1 N2 terms ","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate abundance from density-dependent mortality — calc_SRR","text":"Beverton-Holt stock recruit relationship following form: $$\\textrm{Smolt} = \\dfrac{\\alpha N_1}{1 + \\beta N_2}$$ \\(\\alpha = P\\), \\(\\beta = P/C\\). Ricker stock recruit relationship following form: $$\\textrm{Smolt} = \\alpha N_1 \\exp(-\\beta N_2)$$ \\(\\alpha = P\\), \\(\\beta = P/(Ce)\\), \\(e\\) Euler's number. Productivity \\(P\\) terms abundance per unit \\(N_1\\) \\(N_2\\).","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert density-dependent survival parameters — calc_SRRpars","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"Converts capacity/productivity parameters alpha/beta stock-recruit parameters productivity terms smolts per spawner alpha terms smolts per egg.","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"","code":"calc_SRRpars(p, capacity, f = 1, p_female = 1, type = c(\"BH\", \"Ricker\"))"},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"p Numeric, productivity parameter sets maximum survival initial abundance approaches zero capacity Numeric, capacity parameter set maximum survivors f Fecundity, spawning output per mature female p_female proportion females per spawner type Character, functional form stock-recruit relationship","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"vector alpha beta value, respectively","code":""},{"path":"https://docs.salmonmse.com/reference/calc_SRRpars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert density-dependent survival parameters — calc_SRRpars","text":"$$\\alpha = \\dfrac{P}{f \\times p_{female}}$$ Beverton-Holt stock recruit relationship: $$\\beta = \\dfrac{\\alpha}{C}$$ Ricker stock recruit relationship: $$\\beta = \\dfrac{\\alpha}{Ce}$$, \\(e\\) Euler's number.","code":""},{"path":[]},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate F from harvest rate — get_F","title":"Calculate F from harvest rate — get_F","text":"Solves apical instantaneous fishing mortality rate harvest rate (total retained catch total abundance).","code":""},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate F from harvest rate — get_F","text":"","code":"get_F(u = 0, M, N = 1, vul = 1, ret = 1, release_mort = 0, Fmax = 20)"},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate F from harvest rate — get_F","text":"u Harvest rate, 0-1 M Instantaneous natural mortality rate N Abundance vul Vulnerability ret Retention rate, 0-1 release_mort Release mortality proportion, 0-1. relevant ret < 1 Fmax Maximum allowable value F","code":""},{"path":"https://docs.salmonmse.com/reference/get_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate F from harvest rate — get_F","text":"Numeric apical F","code":""},{"path":"https://docs.salmonmse.com/reference/make_Harvest_MMP.html","id":null,"dir":"Reference","previous_headings":"","what":"Harvest component of salmon operating model — make_Harvest_MMP","title":"Harvest component of salmon operating model — make_Harvest_MMP","text":"function creates multi-stock management procedure","code":""},{"path":"https://docs.salmonmse.com/reference/make_Harvest_MMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harvest component of salmon operating model — make_Harvest_MMP","text":"","code":"make_Harvest_MMP(u_terminal = 0.1, u_preterminal = 0, m = 0, release_mort = 0)"},{"path":"https://docs.salmonmse.com/reference/make_Harvest_MMP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harvest component of salmon operating model — make_Harvest_MMP","text":"u_terminal Numeric 0-1. Harvest rate terminal fishery. u_preterminal Numeric 0-1. Harvest rate preterminal fishery. m Numeric 0-1. Mark rate, .e., retention rate. release_mort Vector length 2 (numeric 0-1). Release mortality, proportion released fish die.","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal salmonMSE functions for converting operating model inputs and outputs — MMSE2SMSE","title":"Internal salmonMSE functions for converting operating model inputs and outputs — MMSE2SMSE","text":"SOM2MOM() converts salmon operating model (SOM) multi-stock operating model (MOM) MMSE2SMSE() converts openMSE output, along additional state variables recorded salmonMSE_env, salmon MSE object (SMSE) make_Stock() creates Stock object (openMSE) corresponding salmon life stage make_Fleet() creates Fleet object (openMSE) corresponding fishery interacts various salmon life stages salmonMSE() wrapper function coordinates simulation output.","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal salmonMSE functions for converting operating model inputs and outputs — MMSE2SMSE","text":"","code":"MMSE2SMSE(MMSE, SOM, Harvest_MMP, N, Ford, state)  SOM2MOM(SOM)  make_Stock(SOM, NOS = TRUE, stage = c(\"immature\", \"return\", \"escapement\"))  make_Fleet(SOM, NOS = TRUE, stage = c(\"immature\", \"return\", \"escapement\"))"},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal salmonMSE functions for converting operating model inputs and outputs — MMSE2SMSE","text":"MMSE Object class MMSE returned MSEtool SOM object class SOM Harvest_MMP Optional harvest function created make_Harvest_MMP() N Data frame abundance age saved salmonMSE_env environment simulation Ford Data frame phenotypic trait values saved salmonMSE_env environment simulation state Data frame state variables saved salmonMSE_env environment simulation NOS Logical, whether Stock Fleet object corresponds natural origin hatchery origin fish stage Character indicating corresponding salmon life stage Stock Fleet object","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE-int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal salmonMSE functions for converting operating model inputs and outputs — MMSE2SMSE","text":"MMSE2SMSE: SMSE object SOM2MOM: MOM object make_Stock: List containing Stock object accompanying custom parameters list make_Stock: List containing Fleet object accompanying custom parameters list","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Run salmonMSE — salmonMSE","title":"Run salmonMSE — salmonMSE","text":"salmonMSE() runs salmon management strategy evaluation following steps: Converts salmon operating model (SOM) multi-stock operating model (MOM) via SOM2MOM() Creates harvest management procedure specifying harvest control rule Generates historical reconstruction state variables Runs projection (Hist = FALSE) Converts openMSE output, along additional state variables recorded salmonMSE_env, salmon MSE object (SMSE) via MMSE2SMSE()","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run salmonMSE — salmonMSE","text":"","code":"salmonMSE(SOM, Hist = FALSE, silent = FALSE, trace = FALSE, convert = TRUE)"},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run salmonMSE — salmonMSE","text":"SOM object class SOM Hist Logical, whether stop function stop historical simulations? Returns list containing historical data silent Logical, whether report progress console bar trace Logical, whether report additional messages openMSE convert Logical, whether convert output salmon MSE (SMSE) object","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run salmonMSE — salmonMSE","text":"Hist = TRUE multiHist object (list). Otherwise, convert = TRUE, SMSE object convert = FALSE, MMSE object.","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","title":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","text":"Environment store salmon specific variables, e.g, fitness, simulation","code":""},{"path":"https://docs.salmonmse.com/reference/salmonMSE_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","text":"","code":"salmonMSE_env"},{"path":"https://docs.salmonmse.com/reference/salmonMSE_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Environment to store salmon specific variables, e.g, fitness, during the simulation — salmonMSE_env","text":"object class environment length 3.","code":""}]
